[{"categories":["Linux"],"content":"WTF和bashtop是我个人目前在用的系统资源管理面板，界面非常的美观，极具极客风范，在这里我分别做简单介绍。 ","date":"2020-06-12","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:0:0","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux"],"content":"WTF WTF（又名“wtfutil”）是终端的个人信息仪表板，可快速访问您非常重要但不常需要的统计信息和数据。 项目地址：https://github.com/wtfutil/wtf 官方站点：https://wtfutil.com/ 先放一张截图吧： WTF截图\" WTF截图 面板中有以下展示模块： 世界时间 我的IP地址信息 TODO List（待办事件） 系统安全状态 当前城市天气 电源使用情况 docker 运行状态 资源使用情况 硬盘占用情况 开机时长 好了，废话不多说，直接开始吧。 ","date":"2020-06-12","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:1:0","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux"],"content":"安装与使用 首先打开项目的 release仓库 下载可直接使用的二进制包. wget https://github.com/wtfutil/wtf/releases/download/v0.30.0/wtf_0.30.0_linux_amd64.tar.gz tar xf wtf_0.30.0_linux_amd64.tar.gz 解压完成之后，直接运行./wtfutil即可，为了日后方便使用，可以将该程序软连接到用户bin目录进行使用： ln -sv /root/wtfutil /usr/bin/ ","date":"2020-06-12","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:1:1","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux"],"content":"配置文件 下面是我的配置文件，配置文件的目录是$HOME/.config/wtf/config.yml，可以拿来参考参考： :information_source:文件比较长，单击»\u003e 这里 «\u003c可直接跳到下一节 wtf:colors:background:blackborder:focusable:darkslatebluefocused:orangenormal:graychecked:yellowhighlight:fore:blackback:grayrows:even:yellowodd:whitegrid:columns:[40,35,35,55]rows:[10,10,10,10,4]refreshInterval:1openFileUtil:\"open\"mods:digitalclock:color:redenabled:truefont:digitalfonthourFormat:24position:top:0left:0height:1width:1refreshInterval:1title:\"big clock\"type:\"digitalclock\"world_time:title:\"World Time\"type:clockscolors:rows:even:\"lightblue\"odd:\"white\"enabled:truelocations:UTC:\"Etc/UTC\"London:\"Europe/London\"Berlin:\"Europe/Berlin\"New_York:\"America/New_York\"China:\"Asia/Shanghai\"position:top:0left:1height:1width:1refreshInterval:15sort:\"alphabetical\"battery:type:powertitle:\"⚡️\"enabled:trueposition:top:1left:3height:1width:1refreshInterval:15todolist:type:todocheckedIcon:\"X\"colors:checked:grayhighlight:fore:\"black\"back:\"orange\"enabled:truefilename:\"todo.yml\"position:top:1left:0height:2width:1refreshInterval:3600ip:type:ipinfotitle:\"My IP\"colors:name:\"lightblue\"value:\"white\"enabled:trueposition:top:0left:2height:1width:2refreshInterval:150prettyweather:enabled:truecity:\"临沂\"position:top:1left:2height:1width:1refreshInterval:300unit:\"m\"view:0language:\"en\"security:enabled:trueposition:top:1left:1height:1width:1refreshInterval:3600docker:type:dockerenabled:truelabelColor:lightblueposition:top:2left:1height:1width:3refreshInterval:1resources:type:resourceusageenabled:trueposition:top:3left:0height:2width:1refreshInterval:1uptime:type:cmdrunnerargs:[\"\"]cmd:\"uptime\"enabled:trueposition:top:4left:1height:1width:3refreshInterval:30disks:type:cmdrunnercmd:\"df\"args:[\"-h\"]enabled:trueposition:top:3left:1height:1width:3refreshInterval:3600 ","date":"2020-06-12","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:1:2","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux"],"content":"官方支持模块 Azure DevOps BambooHR Buildkite CDS CircleCI Clocks CmdRunner Crypto Currencies Datadog DEV (dev.to) Digital Clock DigitalOcean Docker Exchange Rates Feed Reader Gerrit Git GitHub GitLab Gitter Google Apps Hacker News Have I Been Pwned (HIBP) IP Addresses Jenkins Jira Kubernetes Logger Mercurial New Relic OpsGenie Pagerduty Pi-hole Power Resource Usage Rollbar Security Sports Spotify Subreddit Textfile Todo Todoist Transmission TravisCI Trello Twitter VictorOps OnCall Weather Services Zendesk ","date":"2020-06-12","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:1:3","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux"],"content":"bashtop 官方开源仓库：https://github.com/aristocratos/bashtos 截图\" 截图 主菜单： 主菜单\" 主菜单 选项菜单： 选项菜单\" 选项菜单 ","date":"2020-06-12","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:2:0","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux"],"content":"安装与使用 Add PPA repository and install bashtop sudo add-apt-repository ppa:bashtop-monitor/bashtop sudo apt update sudo apt install bashtop 安装完毕之后，直接在终端运行bashtop即可。 使用ESC键可以呼出菜单，按下q键退出。 ","date":"2020-06-12","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:2:1","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux"],"content":"配置文件 All options changeable from within UI. Config files stored in “$HOME/.config/bashtop” folder bashtop.cfg: (auto generated if not found) #? Config file for bashtop v. 0.9.9 #* Color theme, looks for a .theme file in \"$HOME/.config/bashtop/themes\" and \"$HOME/.config/bashtop/user_themes\", \"Default\" for builtin default theme color_theme=\"Default\" #* Update time in milliseconds, increases automatically if set below internal loops processing time, recommended 2000 ms or above for better sample times for graphs update_ms=\"2500\" #* Processes sorting, \"pid\" \"program\" \"arguments\" \"threads\" \"user\" \"memory\" \"cpu lazy\" \"cpu responsive\" \"tree\" #* \"cpu lazy\" updates sorting over time, \"cpu responsive\" updates sorting directly at a cpu usage cost proc_sorting=\"cpu lazy\" #* Reverse sorting order, \"true\" or \"false\" proc_reversed=\"false\" #* Check cpu temperature, only works if \"sensors\", \"vcgencmd\" or \"osx-cpu-temp\" commands is available check_temp=\"true\" #* Draw a clock at top of screen, formatting according to strftime, empty string to disable draw_clock=\"%X\" #* Update main ui when menus are showing, set this to false if the menus is flickering too much for comfort background_update=\"true\" #* Custom cpu model name, empty string to disable custom_cpu_name=\"\" #* Enable error logging to \"$HOME/.config/bashtop/error.log\", \"true\" or \"false\" error_logging=\"true\" #* Show color gradient in process list, \"true\" or \"false\" proc_gradient=\"true\" #* If process cpu usage should be of the core it's running on or usage of the total available cpu power proc_per_core=\"false\" #* Optional filter for shown disks, should be names of mountpoints, \"root\" replaces \"/\", separate multiple values with space disks_filter=\"\" #* Enable check for new version from github.com/aristocratos/bashtop at start update_check=\"true\" #* Enable graphs with double the horizontal resolution, increases cpu usage hires_graphs=\"false\" #* Enable the use of psutil python3 module for data collection, default on OSX use_psutil=\"true\" ","date":"2020-06-12","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:2:2","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux"],"content":"[TOC] ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:0:0","tags":["Linux","随机数","openssl"],"title":"Linux生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"通过 openssl 生成 [root@myhost ~]\\# openssl rand -base64 3 xsSp [root@myhost ~]\\# openssl rand -base64 8 8SlHCsBAiYw= [root@myhost ~]\\# openssl rand -base64 10 nUzBw8ngKGGqWw== `openssl rand -base64 32|tr A-Z a-z|cut -c 1-10` ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:1:0","tags":["Linux","随机数","openssl"],"title":"Linux生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"使用 date 命令生成 [root@myhost ~]\\# date +%s 1539071518 [root@myhost ~]\\# date +%N 801398716 [root@myhost ~]\\# date +%s%N 1539071555311467855 `date +%s |sha256sum |base64 |head -c 10 ;echo` ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:2:0","tags":["Linux","随机数","openssl"],"title":"Linux生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"使用 md5sum 生成随机数 date | md5sum ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:3:0","tags":["Linux","随机数","openssl"],"title":"Linux生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"使用 dd 命令生成随机数 dd if=/dev/urandom bs=1 count=15|base64 -w 0 ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:4:0","tags":["Linux","随机数","openssl"],"title":"Linux生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"通过/dev/random设备产生uuid [root@myhost ~]\\# cat /proc/sys/kernel/random/uuid a3dfb0f2-f893-4e57-9d67-184a88d4cb5d [root@myhost ~]\\# cat /proc/sys/kernel/random/uuid |cut -c 1-8 b80c60d8 ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:5:0","tags":["Linux","随机数","openssl"],"title":"Linux生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"使用系统环境变量 RANDOM [root@myhost ~]\\# echo $RANDOM 14535 ##说明：linux系统下的环境变量$RANDOM的取值范围是：0–32767 。 产生0-25范围内的数，用这个环境变量对26取余即可。 [root@myhost ~]\\# echo $(($RANDOM%26)) 6 [root@myhost ~]\\# echo $((RANDOM%26)) 11 ##说明：第二个表达式RANDOM前面无$符号好像也可以。 产生6位数的整数，用这个环境变量加上100000即可。 [root@myhost ~]\\# echo $(($RANDOM+100000)) 117482 [root@myhost ~]\\# echo $((RANDOM+100000)) 126058 ##说明：第二个表达式RANDOM前面无$符号好像也可以。 产生加密的随机数码，将随机数管道给命令md5sum命令即可。 [root@myhost ~]\\# echo $RANDOM |md5sum 6ee8cd13547eb044ad13ba014573af6f - 需要固定位数的随机数码，将随机数管道给命令md5sum命令再管道给cut命令即可。 [root@myhost ~]\\# echo $RANDOM |md5sum|cut -c 1-8 de3cfe23 ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:6:0","tags":["Linux","随机数","openssl"],"title":"Linux生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"使用第三方工具 expect 非交互式程序控制下用mkpasswd命令： yum install -y expect mkpasswd -l 7 # 生成七位密码包含大小写加特殊字符 使用pwgen生成随机可读的密码： yum install pwgen # 生成长度8，含有数字，含有大小写字母的密码4个，列打印 pwgen -ncC 8 4 # 生成长度8，含有数字，含有小写字母，不包含歧义的密码4个，列打印 pwgen -nABC 8 4 # 生成长度16，含有数字，含有大小写字母，含有特殊字符的密码8个，行打印 pwgen -ncy1 16 8 参数说明： -c or –capitalize密码中至少包含一个大写字母 -A or –no-capitalize密码中不包含大写字母 -n or –numerals密码中至少包含一个数字 -0 or –no-numerals密码中不包含数字 -y or –symbols密码中至少包含一个特殊符号 -s or –secure生成完全随机密码 -B or –ambiguous密码中不包含歧义字符（例如1,l,O,0） -H or –sha1=path/to/file[#seed]使用SHA1 hash给定的文件作为一个随机种子 -C在列中打印生成的密码 -1不要在列中打印生成的密码，即一行一个密码 -v or –no-vowels不要使用任何元音，以避免偶然的脏话 其他第三方工具： randpw、spw、gpg、xkcdpass ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:7:0","tags":["Linux","随机数","openssl"],"title":"Linux生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"参考链接 https://blog.csdn.net/yuki5233/article/details/82997001 ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:8:0","tags":["Linux","随机数","openssl"],"title":"Linux生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Tools","Android","Ubuntu"],"content":"跨平台安卓投屏神器","date":"2020-05-28","objectID":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"Scrcpy 简介 应用程序可显示和控制通过USB（或通过TCP / IP）连接的Android设备。它不需要任何根访问权限。它适用于GNU / Linux，Windows和macOS。 github地址：https://github.com/Genymobile/scrcpy ","date":"2020-05-28","objectID":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:1:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"配置环境 安装adb服务，使用数据线连接自己的安卓设备，并查看自己的安卓设备： sudo apt-get install android-tools-adb adb start-server $ lsusb Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 001 Device 005: ID 0bda:0821 Realtek Semiconductor Corp. Bus 001 Device 004: ID 0bda:0129 Realtek Semiconductor Corp. RTS5129 Card Reader Controller Bus 001 Device 003: ID 13d3:a745 IMC Networks Bus 001 Device 054: ID `24ae:1813` ... 找到自己的安卓设备哪一行，24ae、1813在下面会用到。 创建设备文件： 下面命令中的名称71-android是自定义的，我的这个代表安卓7.1的意思。 echo 0x12d1 \u003e ~/.android/adb_usb.ini touch /etc/udev/rules.d/71-android.rules gedit /etc/udev/rules.d/71-android.rules 将以下内容写入刚刚创建的文件，注意，下面的24ae、1813要改成自己的安卓设备的id（见上）： SUBSYSTEM\"usb”, ATTRS{idVendor}“24ae”, ATTRS{idProduct}==\"1813”, MODE=\"0666” 更改文件权限： chmod 666 /etc/udev/rules.d/90-android.rules 重启 ADB 服务： service udev restart adb kill-server adb start-server ","date":"2020-05-28","objectID":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:2:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"Scrcpy 安装与使用 安装： # 使用snap安装 sudo snap install scrcpy # 或者 apt install scrcpy 列出设备： scrcpy.adb devices 开始投屏： scrcpy ","date":"2020-05-28","objectID":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:3:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"设置无线连接Android设备 :information_source:先使用数据线将手机和电脑连接并在手机端开启「开发者选项」及「USB 调试」 # 开启手机端口 adb tcpip 6666 拔出数据线，开启无线连接： adb connect 192.168.8.154:6666 192.168.8.154为你Android设备的IP地址，可以通过路由器后台获取或者在手机上使用相关软件进行获取。 启动 scrcpy ： scrcpy ","date":"2020-05-28","objectID":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:4:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"Scrcpy 快捷键 Action Shortcut Shortcut (macOS) Switch fullscreen mode Ctrl+f Cmd+f Rotate display left Ctrl+← (left) Cmd+← (left) Rotate display right Ctrl+→ (right) Cmd+→ (right) Resize window to 1:1 (pixel-perfect) Ctrl+g Cmd+g Resize window to remove black borders Ctrl+x | Double-click¹ Cmd+x | Double-click¹ Click on HOME Ctrl+h | Middle-click Ctrl+h | Middle-click Click on BACK Ctrl+b | Right-click² Cmd+b | Right-click² Click on APP_SWITCH Ctrl+s Cmd+s Click on MENU Ctrl+m Ctrl+m Click on VOLUME_UP Ctrl+↑ (up) Cmd+↑ (up) Click on VOLUME_DOWN Ctrl+↓ (down) Cmd+↓ (down) Click on POWER Ctrl+p Cmd+p Power on Right-click² Right-click² Turn device screen off (keep mirroring) Ctrl+o Cmd+o Turn device screen on Ctrl+Shift+o Cmd+Shift+o Rotate device screen Ctrl+r Cmd+r Expand notification panel Ctrl+n Cmd+n Collapse notification panel Ctrl+Shift+n Cmd+Shift+n Copy device clipboard to computer Ctrl+c Cmd+c Paste computer clipboard to device Ctrl+v Cmd+v Copy computer clipboard to device and paste Ctrl+Shift+v Cmd+Shift+v Enable/disable FPS counter (on stdout) Ctrl+i Cmd+i ¹Double-click on black borders to remove them. ²Right-click turns the screen on if it was off, presses BACK otherwise. ","date":"2020-05-28","objectID":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:5:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"参考链接 Scrcpy Documentation: https://github.com/Genymobile/scrcpy ","date":"2020-05-28","objectID":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:6:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["VPN","CentOS"],"content":"OpenVPN 简介 OpenVPN 是一个基于 OpenSSL 库的应用层 VPN 实现。和传统 VPN 相比，它的优点是简单易用。 [1] OpenVPN允许参与建立VPN的单点使用共享金钥，电子证书，或者用户名/密码来进行身份验证。它大量使用了OpenSSL加密库中的SSLv3/TLSv1 协议函式库。OpenVPN能在Solaris、Linux、OpenBSD、FreeBSD、NetBSD、Mac OS X与Windows 2000/XP/Vista上运行，并包含了许多安全性的功能。它并不是一个基于Web的VPN软件，也不与IPsec及其他VPN软件包兼容。 ","date":"2020-05-21","objectID":"/openvpn-for-centos/:1:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"OpenVPN 安装 ","date":"2020-05-21","objectID":"/openvpn-for-centos/:2:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"使用EasyRSA构建 CA 首先从项目Github存储库下载EasyRSA的最新版本并解压： cd \u0026\u0026 wget https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.5/EasyRSA-nix-3.0.7.tgz tar xzf EasyRSA-3.0.7.tgz 复制模板文件，并进行适当修改： mv EasyRSA-3.0.7 EasyRSA-CA; cd EasyRSA-CA cp vars.example vars # ---------- 编辑 vars 文件内容`95`行左右 ---------- set_var EASYRSA_REQ_COUNTRY \"CN\" set_var EASYRSA_REQ_PROVINCE \"Shandong\" set_var EASYRSA_REQ_CITY \"Jinan\" set_var EASYRSA_REQ_ORG \"AGou\" set_var EASYRSA_REQ_EMAIL \"AGou-ops@foxmail.com\" set_var EASYRSA_REQ_OU \"Community\" 修改完成之后保存退出。 初始化PKI： [root@test EasyRSA-CA]\\# ./easyrsa init-pki Note: using Easy-RSA configuration from: /root/EasyRSA-3.0.7/vars init-pki complete; you may now create a CA or requests. Your newly created PKI dir is: /root/EasyRSA-3.0.7/pki 接下来建立CA： [root@test EasyRSA-CA]\\# ./easyrsa build-ca nopass Note: using Easy-RSA configuration from: /root/EasyRSA-3.0.7/vars Using SSL: openssl OpenSSL 1.0.2k-fips 26 Jan 2017 Generating RSA private key, 2048 bit long modulus ...............+++ ............................................................................................................................+++ e is 65537 (0x10001) You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Common Name (eg: your user, host, or server name) [Easy-RSA CA]: CA creation complete and you may now import and sign cert requests. Your new CA certificate file for publishing is at: /root/EasyRSA-3.0.7/pki/ca.crt 完成后，该脚本将创建两个文件-CA公共证书PKI/ca.crt和CA私钥PKI/private/ca.key ","date":"2020-05-21","objectID":"/openvpn-for-centos/:2:1","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"安装 OpenVPN 和 EasyRSA 可以在 OpenVPN 的官方 github 仓库 下载最新源码包进行编译安装，在这里为了方便，我使用epel仓库进行安装： yum install epel-release -y yum install openvpn -y 获取最新版本的EasyRSA： cd \u0026\u0026 wget https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.5/EasyRSA-nix-3.0.7.tgz tar xzf EasyRSA-3.0.7.tgz mv EasyRSA-3.0.7 EasyRSA-Sever1 cd EasyRSA-Sever1 尽管我们已经在 CA 主机上初始化了PKI，但是我们还需要在 OpenVPN 服务器上创建一个新的 PKI ： [root@test EasyRSA-Server1]\\# ./easyrsa init-pki Note: using Easy-RSA configuration from: /root/EasyRSA-Server1/vars init-pki complete; you may now create a CA or requests. Your newly created PKI dir is: /root/EasyRSA-Server1/pki ","date":"2020-05-21","objectID":"/openvpn-for-centos/:2:2","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"创建Diffie-Hellman和HMAC密钥 生成一个Diffie-Hellman密钥，该密钥将在密钥交换期间使用，并使用HMAC签名文件为连接添加附加的安全层。 在OpenVPN服务器上，生成Diffie-Hellman密钥： cd ~/EasyRSA-Server1 ./easyrsa gen-dh 复制该文件到/etc/openvpn目录中去： cp /root/EasyRSA-Server1/pki/dh.pem /etc/openvpn 接下来，使用openvpn二进制文件生成HMAC签名： openvpn --genkey --secret ta.key 然后将生成的ta.key复制到/etc/openvpn目录中去： cp ta.key /etc/openvpn ","date":"2020-05-21","objectID":"/openvpn-for-centos/:2:3","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"创建服务器证书和私钥 进入OpenVPN服务器上的EasyRSA目录，并为服务器和证书请求文件生成一个新的私钥： cd ~/EasyRSA-Server1 ./easyrsa gen-req server1 nopass 该命令将创建两个文件，一个私钥（server1.key）和一个证书请求文件（server1.req） 将生成的私钥复制到/etc/openvpn目录： cp /root/EasyRSA-Server1/pki/private/server1.key /etc/openvpn/ 将证书请求发送到CA主机（这里我CA主机与OpenVPN为同一主机）： cp ~/EasyRSA-Server1/pki/reqs/server1.req /tmp 登录CA主机，切换到 EasyRSA 目录并导入证书请求文件： cd ~/EasyRSA-CA ./easyrsa import-req /tmp/server1.req server1 此命令只是将请求文件复制到pki/reqs目录中。 在CA主机上，签署证书： ./easyrsa sign-req server server1 确认信息无误之后，输入 yes 然后点击回车即可。 在CA主机上，将签名的证书server1.crt和ca.crt文件传发送回OpenVPN主机： cp ~/EasyRSA-CA/pki/issued/server1.crt /etc/openvpn/ cp ~/EasyRSA-CA/pki/ca.crt /etc/openvpn/ :warning: 这里需要注意的是：我的CA主机和OpenVPN主机是同一主机，所以上面的/etc/openvpn目录是OpenVPN主机的。 所有步骤都完成之后，在/etc/openvpn目录下应当有这些文件存在： [root@test EasyRSA-CA]\\# ls /etc/openvpn/ ca.crt client dh.pem server server1.crt server1.key ta.key ","date":"2020-05-21","objectID":"/openvpn-for-centos/:2:4","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"配置OpenVPN服务 将 OpenVPN 的模板配置文件复制到/etc/openvpn： cp /usr/share/doc/openvpn-2.4.9/sample/sample-config-files/server.conf /etc/openvpn/server1.conf 修改server1.conf，找到证书，密钥和DH参数指令并更改文件名： user nobody group nogroup # ---------- 大约在78行左右 ---------- cert server1.crt key server1.key dh dh.pem # 在文件末尾添加以下行。该指令会将消息身份验证算法（HMAC）从SHA1更改为SHA256 auth SHA256 :information_source:可选： 要通过VPN重定向客户端流量，请找到并取消注释redirect-gateway和dhcp-option选项： /etc/openvpn/server1.conf push \"redirect-gateway def1 bypass-dhcp\" push \"dhcp-option DNS 208.67.222.222\" push \"dhcp-option DNS 208.67.220.220\" 默认情况下，使用OpenDNS解析器。您可以更改它并使用CloudFlare，Google或您想要的任何其他DNS解析器。 完整配置文件参考： port 1194 proto udp dev tun ca ca.crt cert server1.crt key server1.key # This file should be kept secret dh dh.pem server 10.8.0.0 255.255.255.0 ifconfig-pool-persist ipp.txt push \"redirect-gateway def1 bypass-dhcp\" push \"dhcp-option DNS 208.67.222.222\" push \"dhcp-option DNS 208.67.220.220\" keepalive 10 120 tls-auth ta.key 0 # This file is secret cipher AES-256-CBC user nobody group nobody persist-key persist-tun status openvpn-status.log verb 3 explicit-exit-notify 1 auth SHA256 ","date":"2020-05-21","objectID":"/openvpn-for-centos/:2:5","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"启动 OpenVPN 服务 systemctl start openvpn@server1 成功启动之后，OpenVPN Server 会创建一个 tun 设备，即tun0： [root@test openvpn]\\# ip a show tun0 3: tun0: \u003cPOINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP\u003e mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 100 link/none inet 10.8.0.1 peer 10.8.0.2/32 scope global tun0 valid_lft forever preferred_lft forever inet6 fe80::afaa:c6f7:7ae8:3a76/64 scope link flags 800 valid_lft forever preferred_lft forever 为了正确转发网络数据包，我们需要启用IP转发： echo \"net.ipv4.ip_forward = 1\" \u003e\u003e /etc/sysctl.conf sysctl -p ","date":"2020-05-21","objectID":"/openvpn-for-centos/:2:6","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"配置客户端接口 创建一个单独的SSL证书，并为每个VPN客户端生成一个不同的配置文件。 客户端私钥和证书请求可以在客户端计算机或服务器上生成。为简单起见，我们将在服务器上生成证书请求，然后将其发送到CA进行签名。 生成客户端证书和配置文件的整个过程如下： 在OpenVPN服务器上生成私钥和证书请求； 将请求发送到要签名的CA计算机； 将签名的SSL证书复制到OpenVPN服务器并生成配置文件； 将配置文件发送到VPN客户端的计算机。 首先，在OpenVPN主机上创建一组目录来存放客户端文件： mkdir -p ~/openvpn-clients/{configs,base,files} base 目录将存储将在所有客户端文件之间共享的基本文件和配置； configs 目录将存储生成的客户端配置； files 目录将存储特定于客户端的证书/密钥对。 复制ca.crt和ta.key文件到~/openvpn-clients/base目录： cp ~/EasyRSA-Server1/ta.key ~/openvpn-clients/base/ cp /etc/openvpn/ca.crt ~/openvpn-clients/base/ 将示例客户端配置文件复制到~/openvpn-clients/base/目录下： cp /usr/share/doc/openvpn-2.4.9/sample/sample-config-files/client.conf ~/openvpn-clients/base/ 编辑client.conf文件以匹配我们的服务器配置： remote 172.16.1.131 1194 # 在文件结尾添加以下内容 auth SHA256 key-direction 1 完整配置文件参考如下所示： client dev tun proto udp remote 172.16.1.131 1194 resolv-retry infinite nobind persist-key persist-tun remote-cert-tls server cipher AES-256-CBC verb 3 auth SHA256 key-direction 1 接下来，创建一个简单的bash脚本，它将基本配置和文件与客户端证书和密钥合并，并将生成的配置存储在~/openvpn-clients/configs目录中： vim ~/openvpn-clients/gen_config.sh #!/bin/bash FILES_DIR=$HOME/openvpn-clients/files BASE_DIR=$HOME/openvpn-clients/base CONFIGS_DIR=$HOME/openvpn-clients/configs BASE_CONF=${BASE_DIR}/client.conf CA_FILE=${BASE_DIR}/ca.crt TA_FILE=${BASE_DIR}/ta.key CLIENT_CERT=${FILES_DIR}/${1}.crt CLIENT_KEY=${FILES_DIR}/${1}.key # Test for files for i in \"$BASE_CONF\" \"$CA_FILE\" \"$TA_FILE\" \"$CLIENT_CERT\" \"$CLIENT_KEY\"; do if [[ ! -f $i ]]; then echo \" The file $idoes not exist\" exit 1 fi if [[ ! -r $i ]]; then echo \" The file $iis not readable.\" exit 1 fi done # Generate client config cat \u003e ${CONFIGS_DIR}/${1}.ovpn \u003c\u003cEOF $(cat ${BASE_CONF}) \u003ckey\u003e $(cat ${CLIENT_KEY}) \u003c/key\u003e \u003ccert\u003e $(cat ${CLIENT_CERT}) \u003c/cert\u003e \u003cca\u003e $(cat ${CA_FILE}) \u003c/ca\u003e \u003ctls-auth\u003e $(cat ${TA_FILE}) \u003c/tls-auth\u003e EOF 赋予执行权限： chmod +x ~/openvpn-clients/gen_config.sh ","date":"2020-05-21","objectID":"/openvpn-for-centos/:3:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"创建客户端证书私钥和配置 生成客户端私钥和证书请求的过程与生成服务器密钥和证书请求的过程相同。 登录OpenVPN主机为客户端生成一个新的私钥和一个证书请求： cd ~/EasyRSA-Server1 ./easyrsa gen-req client1 nopass 将私钥client1.key复制到~/openvpn-clients/files中： cp ~/EasyRSA-Server1/pki/private/client1.key ~/openvpn-clients/files/ 将证书请求文件传输到CA主机： cp ~/EasyRSA-Server1/pki/reqs/client1.req /tmp 进入CA主机，导入证书请求并进行签署： cd ~/EasyRSA-CA ./easyrsa import-req /tmp/client1.req client1 ./easyrsa sign-req client client1 接下来，将签好名的证书client1.crt文件发送回OpenVPN主机： cp ~/EasyRSA-CA/pki/issued/client1.crt ~/openvpn-clients/files 最后一步是使用gen_config.sh脚本生成客户端配置，切换到~/openvpn-clients目录并使用客户端名称作为参数运行脚本： cd ~/openvpn-clients ./gen_config.sh client1 该脚本将在~/client-configs/configs目录中创建一个名为client1.ovpn的文件： [root@test openvpn-clients]\\# ls ~/openvpn-clients/configs client1.ovpn 此时，客户端配置已创建，可以直接将配置文件传输到要用作客户端的设备上。 如果想要添加其他的客户端，重复这些步骤即可。 ","date":"2020-05-21","objectID":"/openvpn-for-centos/:4:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"使用 OpenVPN 在Debian系系统下： sudo apt update -y \u0026\u0026 sudo apt instal openvpn 安装完软件包之后，使用以下命令连接到OpenVPN服务器： sudo openvpn --config client1.ovpn ","date":"2020-05-21","objectID":"/openvpn-for-centos/:5:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"快速安装 OpenVPN sudo apt update -y sudo apt install -y openvpn 从 github 获取一键安装脚本: git clone https://github.com/angristan/openvpn-install.git cd openvpn-install 赋予脚本可执行权限: chmod +x openvpn-install 执行脚本: AUTO_INSTALL=y ./openvpn-install.sh :warning: 注意: 在客户端使用 OpenVPN 时, 要确保服务器端的 OpenVPN 监听的端口处于放行状态. Linux 客户端使用: sudo apt install network-manager-openvpn sudo openvpn ./client.ovpn Windows 客户端使用: 直接去OpenVPN 官方下载站点下载然后导入客户端配置文件 client.ovpn, 然后启动服务即可. ","date":"2020-05-21","objectID":"/openvpn-for-centos/:6:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","Ubuntu"],"content":"WireGuard 简介 ​ WireGuard是具有最新加密技术的现代VPN（虚拟专用网）技术。与IPsec和OpenVPN等其他类似解决方案相比，WireGuard更快，更易于配置且性能更高。它是一个跨平台，几乎可以在任何地方运行，包括Linux，Windows，Android和macOS。 Wireguard是对等VPN。它不使用客户端-服务器模型。根据其配置，对等方可以充当传统的服务器或客户端。 WireGuard通过在充当隧道的每个对等设备上创建网络接口来工作。对等体通过交换和验证公共密钥（类似于SSH模型）来相互认证。公钥与隧道中允许的IP地址列表进行映射。 VPN流量封装在UDP中。在本教程中，我们将在充当VPN服务器的Ubuntu 18.04计算机上设置WireGuard。我们还将向您展示如何将WireGuard配置为客户端。客户端的流量将通过Ubuntu 18.04服务器进行路由。此设置可用于防御中间人攻击，匿名浏览网络，绕过受地域限制的内容，或允许您的同事在远程工作时安全地连接到公司网络。 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:1:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"WG安装 更新软件包列表，并安装管理系统存储库所需的工具： sudo apt update sudo apt install software-properties-common 添加 WireGuard 仓库： sudo add-apt-repository ppa:wireguard/wireguard 出现提示时，按Enter键继续。 add-apt-repository也将自动更新软件包列表。 安装WireGuard软件包： sudo apt install wireguard WireGuard作为内核模块运行，该模块被编译为DKMS模块。成功完成后，您将看到以下输出： wireguard: Running module version sanity check. - Original module - No original module exists within this kernel - Installation - Installing to /lib/modules/4.15.0-88-generic/updates/dkms/ depmod... DKMS: install completed. 更新内核时，需要将针对新内核编译WireGuard模块。 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:2:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"配置WG WireGuard 程序包附带了两个名为wg和wg-quick的命令行工具，可用于配置和管理WireGuard接口。 运行以下命令以生成公钥和私钥： wg genkey | sudo tee /etc/wireguard/privatekey | wg pubkey | sudo tee /etc/wireguard/publickey :information_source: 公私钥放置于/etc/wireguard目录,其中私钥绝对不能与任何人共享 生成密钥后，我们需要配置路由VPN的隧道设备 可以使用ip和wg从命令行设置设备，也可以使用文本编辑器创建配置文件。 创建一个名为wg0.conf(文件名可以随意)的新文件，并添加以下内容： cat \u003e\u003e /etc/wireguard/wg0.conf \u003c\u003c EOF [Interface] Address = 192.168.159.0/24 # 填写网络地址段 SaveConfig = true # 关闭时，接口的当前状态将保存到配置文件中 ListenPort = 51820 # 监听端口 PrivateKey = QNKQCtPo2E5saDnXORaIORhZH6NtcvIJPHqF9EdEL1o= # 私钥文件,即/etc/wireguard/privatekey PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o ens33 -j MASQUERADE # 在启动之前执行的命令或脚本,使用iptables启用伪装,允许流量离开服务器，从而使VPN客户端可以访问Internet。 PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o ens33 -j MASQUERADE # 在启动之后执行的命令或脚本,接口关闭后，iptables规则将被删除 EOF 修改privatekey和wg0.conf的权限, 保证其安全性： sudo chmod 600 /etc/wireguard/{privatekey,wg0.conf} 完成后，使用配置文件中指定的属性启动wg0接口： $ sudo wg-quick up wg0 * 输出内容如下所示: [#] ip link add wg0 type wireguard [#] wg setconf wg0 /dev/fd/63 [#] ip -4 address add 192.168.159.0/24 dev wg0 [#] ip link set mtu 1420 up dev wg0 [#] iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o ens33 -j MASQUERADE 运行wg show wg0检查接口状态和配置： $ sudo wg show wg0 * 输出内容如下所示: interface: wg0 public key: uD6Xex2eP5CEUVcVP3EZB5csh2JReWXthoVZMzURwCQ= private key: (hidden) listening port: 51820 也可以运行ip a show wg0来验证接口状态： $ ip a show wg0 * 输出内容如下所示: 4: wg0: \u003cPOINTOPOINT,NOARP,UP,LOWER_UP\u003e mtu 1420 qdisc noqueue state UNKNOWN group default qlen 1000 link/none inet 192.168.159.0/24 scope global wg0 valid_lft forever preferred_lft forever 设置wireguard 开机自启: sudo systemctl enable wg-quick@wg0 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:3:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"服务器网络和防火墙配置 为了使NAT正常工作，我们需要启用IP转发，打开/etc/sysctl.conf文件，并添加或取消注释以下行： ... net.ipv4.ip_forward=1 ... 修改完成之后, 执行sudo sysctl -p使配置永久生效 如果你使用UFW来管理防火墙，则需要在端口51820上打开UDP通信： sudo ufw allow 51820/udp 至此,WG SERVER 已完成配置 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:4:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"客户端配置 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:5:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"Linux \u0026 macOS 去往官方下载站点(https://wireguard.com/install/), 查看如何安装WireGuard macOS App Store: https://apps.apple.com/us/app/wireguard/id1441195209?ls=1 Ubuntu ≤ 19.04 [module – v1.0.20200413 \u0026 tools – v1.0.20200319] $ sudo add-apt-repository ppa:wireguard/wireguard $ sudo apt-get update $ sudo apt-get install wireguard 设置Linux和macOS客户端过程基本相同, 首先生成公钥与私钥 wg genkey | sudo tee /etc/wireguard/privatekey | wg pubkey | sudo tee /etc/wireguard/publickey 创建/etc/wireguard/wg0.conf并添加以下内容: [Interface] PrivateKey = CLIENT_PRIVATE_KEY # /etc/wireguard/privatekey Address = 192.168.43.0/24 [Peer] PublicKey = SERVER_PUBLIC_KEY # /etc/wireguard/publickey Endpoint = SERVER_IP_ADDRESS:51820 # 对方wireguard server的ip和端口 AllowedIPs = 0.0.0.0/0 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:5:1","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"Windows 直接下载客户端工具: https://download.wireguard.com/windows-client/wireguard-amd64-0.1.0.msi 安装好软件之后, 点击左下角的Add Tunnel, 创建一个新的隧道Create new tunnel name随便起喽, 内容如下: [Interface] PrivateKey = MOeXEby5OG1xQBCP9AJEJEsxmxYDG1FHHzlcOgi/ClI= Address = 192.168.43.0/24 [Peer] PublicKey = uD6Xex2eP5CEUVcVP3EZB5csh2JReWXthoVZMzURwCQ= # 服务器端公钥 Endpoint = 192.168.159.132:51820 # 服务器ip以及端口 AllowedIPs = 0.0.0.0/0 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:5:2","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"将客户端对等方添加到服务器 最后一步是将客户端公钥和IP地址添加到服务器： # sudo wg set wg0 peer CLIENT_PUBLIC_KEY allowed-ips 10.0.0.2 sudo wg set wg0 peer T5ZTibLaWh9/3EzA1ZfCdiojM0HfXvh99mfVlqHpaU0= allowed-ips 192.168.43.0/24 sudo wg set wg0 peer UqF/BDwShHFulAUN4yx0latMIiIW0Cbb+IuNHEYEBj0= allowed-ips 192.168.43.0/24 确保使用在客户端计算机上生成的公用密钥·（sudo cat /etc/wireguard/publickey）·更改CLIENT_PUBLIC_KEY并调整客户端IP地址（如果不同的话），Windows用户可以从WireGuard软件当中复制公钥 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:6:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"Linux 和 macos 客户端 在Linux客户端上，运行以下命令以打开界面： sudo wg-quick up wg0 现在，应该已连接到Ubuntu服务器，并且来自客户端计算机的流量应通过该服务器进行路由，可以使用以下方法检查连接： $ sudo wg * 输出内容如下所示： interface: wg0 public key: sZThYo/0oECwzUsIKTa6LYXLhk+Jb/nqK4kCCP2pyFg= private key: (hidden) listening port: 48052 fwmark: 0xca6c peer: r3imyh3MCYggaZACmkx+CxlD6uAmICI8pe/PGq8+qCg= endpoint: XXX.XXX.XXX.XXX:51820 allowed ips: 0.0.0.0/0 latest handshake: 1 minute, 22 seconds ago transfer: 58.43 KiB received, 70.82 KiB sent 停止和关闭隧道： sudo wg-quick down wg0 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:6:1","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"Windows 客户端 点击软件上的Activate 即可 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:6:2","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"一键安装 wireguard https://github.com/angristan/wireguard-install https://github.com/l-n-s/wireguard-install ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:7:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"参考链接 wireguard Quick Start : https://www.wireguard.com/quickstart/ wireguard Install : https://www.wireguard.com/install/ ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:8:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["Markdown"],"content":"这篇文章展示了基本的 Markdown 语法和格式.","date":"2019-12-01","objectID":"/basic-markdown-syntax/","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例. 注意 这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 Loveit 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. 事实上, 编写 Web 内容很麻烦. WYSIWYG所见即所得 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑. 没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式. 一些主要好处是: Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说: Markdown 格式的首要设计目标是更具可读性. 最初的想法是 Markdown 格式的文档应当以纯文本形式发布, 而不会看起来像被标签或格式说明所标记. 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响, 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式. – John Gruber 话不多说, 我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式! 技巧  将此页保存为书签，以备将来参考! ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:0:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"1 标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃: ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样: \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID 要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中: ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样: \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:1:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"2 注释 注释是和 HTML 兼容的： \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:2:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"3 水平线 HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的. 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签: ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:3:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"4 段落 按照纯文本的方式书写段落, 纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹. 如下段落: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e 可以使用一个空白行进行换行. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:4:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"5 内联 HTML 元素 如果你需要某个 HTML 标签 (带有一个类), 则可以简单地像这样使用: Markdown 格式的段落. \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:5:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"6 强调 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: \u003cstrong\u003e渲染为粗体\u003c/strong\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: \u003cem\u003e渲染为斜体\u003c/em\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: \u003cdel\u003e这段文本带有删除线.\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗, 斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"7 引用 用于在文档中引用其他来源的内容块. 在要引用的任何文本之前添加 \u003e: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:7:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"8 列表 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: * 一项内容 - 一项内容 + 一项内容 例如: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e 技巧 如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框，请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"9 代码 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"行内代码 用 ` 包装行内代码段. 在这个例子中, `\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 输出的 HTML 看起来像这样: \u003cp\u003e 在这个例子中, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e. \u003c/p\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"缩进代码 将几行代码缩进至少四个空格，例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments line 1 of code line 2 of code line 3 of code 输出的 HTML 看起来像这样: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它，只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意 Hugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"10 表格 通过在每个单元格之间添加竖线作为分隔线, 并在标题下添加一行破折号 (也由竖线分隔) 来创建表格. 注意, 竖线不需要垂直对齐. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e 文本右对齐或居中对齐 在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐. 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:10:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"11 链接 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"基本链接 \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上，没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage 输出的 HTML 看起来像这样: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. 注意 定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"12 脚注 脚注使你可以添加注释和参考, 而不会使文档正文混乱. 当你创建脚注时, 会在添加脚注引用的位置出现带有链接的上标编号. 读者可以单击链接以跳至页面底部的脚注内容. 要创建脚注引用, 请在方括号中添加插入符号和标识符 ([^1]). 标识符可以是数字或单词, 但不能包含空格或制表符. 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中, 脚注按顺序编号. 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注). 你不一定要在文档末尾添加脚注. 可以将它们放在除列表, 引用和表格等元素之外的任何位置. 这是一个数字脚注[^1]. 这是一个带标签的脚注[^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注1. 这是一个带标签的脚注2 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:12:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"13 图片 图片的语法与链接相似, 但包含一个在前面的感叹号. ![Minion](https://octodex.github.com/images/minion.png) 或者: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The StormtroopocatAlt text \" The Stormtroopocat 像链接一样, 图片也具有脚注样式的语法: ![Alt text][id] The DojocatAlt text \" The Dojocat 稍后在文档中提供参考内容, 用来定义 URL 的位置: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" 技巧 LoveIt 主题提供了一个包含更多功能的 图片的 shortcode. 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:13:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":null,"content":"岂能尽如人意，但求无愧我心。 ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"关于 LoveIt","uri":"/about/"}]