[{"categories":["Linux","CentOS","Ubuntu"],"content":"Mondo Rescue Mondo Rescue（简称 Mondo）：是一款开源免费的故障恢复和备份工具，可以说是 Linux 操作系统下的 Ghost ，你可以轻松地创建系统（Linux 或 Windows）克隆或备份的 ISO 镜像，可以将这些镜像存放在 CD、DVD、磁带、USB 设备、硬盘和 NFS 上。 官方站点:http://www.mondorescue.org/ ","date":"2020-07-10","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/:1:0","tags":["Linux","系统封装"],"title":"Linux 系统封装","uri":"/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"},{"categories":["Linux","CentOS","Ubuntu"],"content":"安装 mondo 从官方指定的仓库下载 wget http://mondo.mirror.pclark.com/ftp/pub/mondorescue/centos/7/x86_64/mondorescue.repo -O /etc/yum.repos.d/mondorescue.repo yum install -y mondo 或者直接安装rpm包: yum install -y http://mondo.mirror.pclark.com/ftp/pub/mondorescue/centos/7/x86_64/mondo-3.3.0-1.centos7.x86_64.rpm 使用该方法安装可能会缺少依赖包文件,在这里手动解决依赖关系即可(太多了,说着玩的,还是推荐用在线仓库安装吧…): yum install -y http://ftp.mondorescue.org/centos/7/x86_64/afio-2.5-1.centos7.x86_64.rpm yum install -y http://ftp.mondorescue.org/centos/7/x86_64/mindi-3.3.0-1.centos7.x86_64.rpm yum install -y http://ftp.mondorescue.org/centos/7/x86_64/buffer-1.19-8.centos7.x86_64.rpm ... ","date":"2020-07-10","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/:1:1","tags":["Linux","系统封装"],"title":"Linux 系统封装","uri":"/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"},{"categories":["Linux","CentOS","Ubuntu"],"content":"制作光盘镜像 安装完毕后，在终端下输入mondoarchive，即可进入图形安装界面。 mondoarchive See /var/log/mondoarchive.log for details of backup run. Checking sanity of your Linux distribution ....... 随后,按照引导一步步设置即可. ","date":"2020-07-10","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/:1:2","tags":["Linux","系统封装"],"title":"Linux 系统封装","uri":"/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"},{"categories":["Linux","CentOS","Ubuntu"],"content":"Remastersys Remastersys 可以将你安装的 Ubuntu、Debian 及其衍生版打包成一个可以用来安装的 Live CD/DVD 的 ISO 镜像文件，可打包一个包含个人数据的 ISO 镜像文件作为操作系统备份，也可以打包一个不包含个人数据的 ISO 镜像文件发布给其他人安装。 ","date":"2020-07-10","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/:2:0","tags":["Linux","系统封装"],"title":"Linux 系统封装","uri":"/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"},{"categories":["Linux","CentOS","Ubuntu"],"content":"Remastersys 包下载 $ mkdir tools $ cd tools/ $ wget ftp://ftp.gwdg.de/pub/linux/easyvdr/mirror/remastersys/ubuntu/remastersys/remastersys_3.0.4-2_all.deb $ wget ftp://ftp.gwdg.de/pub/linux/easyvdr/mirror/remastersys/ubuntu/remastersys-gui/remastersys-gui_3.0.4-1_amd64.deb ","date":"2020-07-10","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/:2:1","tags":["Linux","系统封装"],"title":"Linux 系统封装","uri":"/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"},{"categories":["Linux","CentOS","Ubuntu"],"content":"安装 Remastersys 依赖 $ sudo apt-get install syslinux-utils isolinux squashfs-tools casper libdebian-installer4 ubiquity-frontend-debconf user-setup discover xresprobe systemd ","date":"2020-07-10","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/:2:2","tags":["Linux","系统封装"],"title":"Linux 系统封装","uri":"/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"},{"categories":["Linux","CentOS","Ubuntu"],"content":"安装 Remastersys-gui 依赖 $ sudo apt-get install libvte-common libvte9 plymouth-x11 ","date":"2020-07-10","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/:2:3","tags":["Linux","系统封装"],"title":"Linux 系统封装","uri":"/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"},{"categories":["Linux","CentOS","Ubuntu"],"content":"开始安装 Remastersys $ cd tools/ $ sudo dpkg -i remastersys_3.0.4-2_all.deb $ sudo dpkg -i remastersys-gui_3.0.4-1_amd64.deb Remastersys 备份操作系统 命令行模式： $ sudo remastersys backup 图形化模式： $ sudo remastersys-gui ","date":"2020-07-10","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/:2:4","tags":["Linux","系统封装"],"title":"Linux 系统封装","uri":"/linux-%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"},{"categories":["Linux"],"content":"Apache HTTPD使用Let's Encrypt实现安全连接(https) 安装cerbot: yum update -y yum install -y cerbot 生成高安全性的DH秘钥到/etc/ssl/certs/目录当中去: sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048 运行以下命令创建目录, 并使它可写为Apache服务器: sudo mkdir -p /var/lib/letsencrypt/.well-known sudo chgrp www-data /var/lib/letsencrypt sudo chmod g+s /var/lib/letsencrypt 为了避免复制代码和配置更易于维护, 创建以下两个配置代码片段: 编辑/etc/apache2/conf-available/letsencrypt.conf Alias /.well-known/acme-challenge/ \"/var/lib/letsencrypt/.well-known/acme-challenge/\" \u003cDirectory \"/var/lib/letsencrypt/\"\u003e AllowOverride None Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec Require method GET POST OPTIONS \u003c/Directory\u003e 编辑/etc/apache2/conf-available/ssl-params.conf: SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1 SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384 SSLHonorCipherOrder off SSLSessionTickets off SSLUseStapling On SSLStaplingCache \"shmcb:logs/ssl_stapling(32768)\" SSLOpenSSLConfCmd DHParameters \"/etc/ssl/certs/dhparam.pem\" Header always set Strict-Transport-Security \"max-age=63072000\" 进行启用配置文件之前, 确保mod_ssl 和mod_headers已经被启用: sudo a2enmod ssl sudo a2enmod headers 然后, 启用SSL配置文件, 运行以下命令即可: sudo a2enconf letsencrypt sudo a2enconf ssl-params 启用HTTP/2模块: sudo a2enmod http2 重启httpd让配置生效: systemctl restart httpd 现在，我们可以使用webroot插件运行Certbot工具并获取SSL证书文件： sudo certbot certonly --agree-tos --email agou-ops@foxmail.com --webroot -w /var/lib/letsencrypt/ -d agou-ops.top -d www.agou-ops.top 如果输出以下信息, 则表已经成功申请到SSL证书文件: IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/agou-ops.top/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/agou-ops.top/privkey.pem Your cert will expire on 2020-10-06. To obtain a new or tweaked version of this certificate in the future, simply run certbot again. To non-interactively renew *all* of your certificates, run \"certbot renew\" - Your account credentials have been saved in your Certbot configuration directory at /etc/letsencrypt. You should make a secure backup of this folder now. This configuration directory will also contain certificates and private keys obtained by Certbot so making regular backups of this folder is ideal. - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let's Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le ","date":"2020-07-10","objectID":"/apache-httpd%E4%BD%BF%E7%94%A8lets-encrypt/:1:0","tags":["Linux","Apache","httpd","SSL"],"title":"Apache HTTPD使用Let's Encrypt","uri":"/apache-httpd%E4%BD%BF%E7%94%A8lets-encrypt/"},{"categories":["Linux"],"content":"配置虚拟主机 创建一个虚拟主机conf.d/agou-ops-top.conf(仅为示例): \u003cVirtualHost *:80\u003e ServerName mail.agou-ops.top Redirect permanent / https://mail.agou-ops.top/ \u003c/VirtualHost\u003e \u003cVirtualHost *:443\u003e ServerName mail.agou-ops.top Protocols h2 http:/1.1 \u003cIf \"%{HTTP_HOST} == 'www.mail.agou-ops.top'\"\u003e Redirect permanent / https://mail.agou-ops.top/ \u003c/If\u003e DocumentRoot /var/www/mail.agou-ops.top/public_html ErrorLog ${APACHE_LOG_DIR}/mail.agou-ops.top-error.log CustomLog ${APACHE_LOG_DIR}/mail.agou-ops.top-access.log combined SSLEngine On SSLCertificateFile /etc/letsencrypt/live/mail.agou-ops.top/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/mail.agou-ops.top/privkey.pem # Other Apache Configuration \u003c/VirtualHost\u003e 重载httpd使虚拟主机配置生效: systemctl reload httpd 现在, 就可以通过https访问你的站点了: https://agou-ops.top ","date":"2020-07-10","objectID":"/apache-httpd%E4%BD%BF%E7%94%A8lets-encrypt/:2:0","tags":["Linux","Apache","httpd","SSL"],"title":"Apache HTTPD使用Let's Encrypt","uri":"/apache-httpd%E4%BD%BF%E7%94%A8lets-encrypt/"},{"categories":["Linux"],"content":"自动更新Let’s Encrypt证书 Let’s Encrypt的证书有效期为90天, 自动更新证书到期前,certbot包创建一个计划, 一天两次, 并自动更新任何证书到期前30天. 解决方法, 添加定时任务, /etc/cron.d/cerbot, 内容如下所示: 0 */12 * * * root test -x /usr/bin/certbot -a \\! -d /run/systemd/system \u0026\u0026 perl -e 'sleep int(rand(3600))' \u0026\u0026 certbot -q renew --renew-hook \"systemctl reload apache2\" 测试更新, 使用certbot的干跑模式进行测试: sudo certbot renew --dry-run ","date":"2020-07-10","objectID":"/apache-httpd%E4%BD%BF%E7%94%A8lets-encrypt/:3:0","tags":["Linux","Apache","httpd","SSL"],"title":"Apache HTTPD使用Let's Encrypt","uri":"/apache-httpd%E4%BD%BF%E7%94%A8lets-encrypt/"},{"categories":["Linux"],"content":"参考链接 SSL lab: https://www.ssllabs.com/ Let’s Encrypt: https://letsencrypt.org/ ","date":"2020-07-10","objectID":"/apache-httpd%E4%BD%BF%E7%94%A8lets-encrypt/:4:0","tags":["Linux","Apache","httpd","SSL"],"title":"Apache HTTPD使用Let's Encrypt","uri":"/apache-httpd%E4%BD%BF%E7%94%A8lets-encrypt/"},{"categories":["生活","日记","吐槽"],"content":"​ 2020年06月28日，端午“三天小短假”已经过去了，按常理说应当放假，哪怕一天也好，但我们没有放假，一行五人还是像往常一样出外业，经理呢也完全没有任何表示，当然我也不奢望有何表示，毕竟这个东西看个人，对我来说也就无所谓了。 可今天是周日，又让我们出外业了，早上七点就把我们叫起来（其实八点半才上班），等了一个多小时才出发。 欸，这时候可能就有小伙伴要问了，为什么周日也要上班呢？没有休息的的时间么，这里引用经理的一些话，大概意思是： 项目比较“紧张”，休息的话视情况而言，比如说项目有可能进度快，不到周末就会休息，有时候呢项目“紧张”，也就不休息了。 ​ 嘿嘿，翻译过来就是，除非外面下大雨或者考试与工作时间冲突才会放假休息，否则就别想了，哦，说不定心情好会给放半天假。 嘿嘿\" 嘿嘿 ​ 你也别跟我说来实习就是来锻炼自己的吃苦精神的，那都是放狗臭屁，至少对于我个人而言，不需要。 要不是为了那点学分，学校又强制要求来实习（虽然表面没直接说），扪心自问，谁又会闲着没事来实习呢？这里我可能言重了，但对于我或者我这类人来说，是这样的，毕竟我/我们的志向不在于此，对于以后要混这碗饭的人来说，实习“或许”是个好选择，为什么用“或许”这个词呢，因为决定性因素太多，学校，指导老师，还有项目经理等等。。。 ​ 是啊，他们都能坚持七天无休上班更何况我们这些小青年呢？能这么单纯想的也真是天真烂漫，是的，我们实习生一天在外面到处跑一天加上餐费（算上补贴）工资才六十块左右，和他们一天二三百块，三四百块相比。。。 啊，果然大学生是廉价劳动力，可恶！ 要是我有这工资，不说和他们一样工资待遇，有一半，就算早上七点开始工作到晚上九点半十点下班我也愿意，迫真，哈哈。 ​ 另外呢，我现在十分讨厌别人拿他那一辈的艰辛和难处“教导/开导”我们这些后辈，那时候确实很难，这是毋庸置疑的，我也十分感激前辈们的努力和付出，这才有了当今这样美好的社会。 也许初中高中前辈们的这些话能感染到我们，但现在长大了，有些道理不言而喻，不知不觉之间也开始厌恶这些话，甚至麻痹，对于这些，我只想说，时代变了，每一代人都有每一代人的烦恼和艰辛之处，或许不是身体上的，但精神和身心上的烦恼与伤害，我觉得要比身体上的严重百倍不止！ ​ 这里又扯远了，进入正题。:next_track_button::next_track_button: 上面这些都不是今天真正让我愤懑写下这篇博客的原因，不止我一人给他说过28号下午1:30-3:00考VR，并且需要提前至少半小时来准备考试。 ​ 可是呢，中午十一点半下班了还没见到他人，开车也不知道去哪办些重要的业务了，果然大学生就是大学生，可能我们是一些无所谓的人吧，过了十分钟，也就是十一点四十左右，我让和我一起实习的同班同学打电话给他，哈哈，真是没想到，打过去，这边响了两声，那边直接给挂了！我敲，我还以为在路上呢，快要到了才没接电话，结果呢，又过了十几二十分钟吧，大概十一点五十多，他打电话给另外一个和我们一起实习的女生，说不过来了，让我们打车回去，？？？！！！真是个小机灵鬼呢…个屁。 我们在郊区又在一个位置比较靠大路远的一个村里，能打到车，我估计考试都考完了，随后，果然，在滴滴上等了十分钟没见个车影。 最后，这里要十分感谢马岭岗村里的那个书记大哥把我俩送回去，还有一同实习的那个女生帮我们说清楚原因让大哥带我们回去考试，真是十分感谢。 以上都只是我的个人观点，想扯淡的话，可以在下方评论区和我一起交流交流这方面的一些东西。 在此，最后一次向万恶的资本主义低头。 ","date":"2020-06-28","objectID":"/%E6%97%A5%E8%AE%B0%E6%9E%9C%E7%84%B6%E5%A4%A7%E5%AD%A6%E7%94%9F%E9%83%BD%E6%98%AF%E5%BB%89%E4%BB%B7%E5%8A%B3%E5%8A%A8%E5%8A%9B%E5%90%97%E5%8F%AF%E6%81%B6/:0:0","tags":["日记","实习","吐槽"],"title":"【日记】果然大学生都是廉价劳动力吗？可恶！","uri":"/%E6%97%A5%E8%AE%B0%E6%9E%9C%E7%84%B6%E5%A4%A7%E5%AD%A6%E7%94%9F%E9%83%BD%E6%98%AF%E5%BB%89%E4%BB%B7%E5%8A%B3%E5%8A%A8%E5%8A%9B%E5%90%97%E5%8F%AF%E6%81%B6/"},{"categories":["生活","日记"],"content":"苦逼的实习已经进行到第三天，天气一天比一天热，不过值得高兴的是，不用再一一进户对所有房屋进行测量了，减少了了不少的工作量，因为昨天下午已经用RTK测量好了控制点，那些无数木遮挡的建筑物就可以直接用无人机进行测量了。无需人工再测量。 测量ing测量ing \" 测量ing 另外呢，这里的村民十分的热心好客，天气炎热，给我们切西瓜和冰棍吃，哈哈，我们三人吃了一路（当然没这么夸张），真是不错呢。 另附一张村民家里遇到的山羊兄弟： 山羊兄弟山羊兄弟 \" 山羊兄弟 啊，还有好多户要量，坚持坚持，也就这几天了，港巴嘚！ ","date":"2020-06-25","objectID":"/%E6%97%A5%E8%AE%B0%E9%A9%AC%E5%B2%AD%E5%B2%97%E6%9D%91%E5%AE%9E%E4%B9%A0/:0:0","tags":["日记","实习"],"title":"【日记】马岭岗村实习","uri":"/%E6%97%A5%E8%AE%B0%E9%A9%AC%E5%B2%AD%E5%B2%97%E6%9D%91%E5%AE%9E%E4%B9%A0/"},{"categories":["linux","Tools"],"content":"本文主要介绍Linux系统下的日志分割工具，Split 和 Logrotate。 ","date":"2020-06-22","objectID":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:0:0","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["linux","Tools"],"content":"Split Linux 系统自带简单日志文件分割工具。 常用参数列表： 选项 含义 -b 分割后的文档大小，单位是byte -C 分割后的文档，单行最大byte数 -d 使用数字作为后缀(default: 字母)，同时使用-a length(default: 2)指定后缀长度 -l 分割后文档的行数 –verbose 显示输出详细信息 示例： split -l --verbose 1000000 split.test -d -a 3 split.log ╰─$ ls split.test split.test008 split.test017 split.test026 split.test000 split.test009 split.test018 split.test027 split.test001 split.test010 split.test019 split.test028 split.test002 split.test011 split.test020 split.test029 split.test003 split.test012 split.test021 split.test030 split.test004 split.test013 split.test022 split.test031 split.test005 split.test014 split.test023 split.test032 split.test006 split.test015 split.test024 split.test033 split.test007 split.test016 split.test025 ... ","date":"2020-06-22","objectID":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:1:0","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["linux","Tools"],"content":"Logrotate ","date":"2020-06-22","objectID":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:2:0","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["linux","Tools"],"content":"简介及解决方案 Logrotate，即Log rotation日志滚动，属于Linux系统自带工具，基于crontab实现时间点滚动日志，计划每天运行的脚本位于 /etc/cron.daily/logrotate。 GitHub 地址：https://github.com/logrotate/logrotate logrotate 是怎么做到滚动日志时不影响程序正常的日志输出呢？logrotate 提供了两种解决方案。 create copytruncate ","date":"2020-06-22","objectID":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:2:1","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["linux","Tools"],"content":"create 这也就是默认的方案，可以通过 create 命令配置文件的权限和属组设置；这个方案的思路是重命名原日志文件，创建新的日志文件。详细步骤如下： 重命名正在输出日志文件，因为重命名只修改目录以及文件的名称，而进程操作文件使用的是 inode，所以并不影响原程序继续输出日志。 创建新的日志文件，文件名和原日志文件一样，注意，此时只是文件名称一样，而 inode 编号不同，原程序输出的日志还是往原日志文件输出。 最后通过某些方式通知程序，重新打开日志文件；由于重新打开日志文件会用到文件路径而非 inode 编号，所以打开的是新的日志文件。 如上也就是 logrotate 的默认操作方式，也就是 mv+create 执行完之后，通知应用重新在新文件写入即可。mv+create 成本都比较低，几乎是原子操作，如果应用支持重新打开日志文件，如 syslog, nginx, mysql 等，那么这是最好的方式。 不过，有些程序并不支持这种方式，压根没有提供重新打开日志的接口；而如果重启应用程序，必然会降低可用性，为此引入了如下方式。 ","date":"2020-06-22","objectID":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:2:2","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["linux","Tools"],"content":"copytruncate 该方案是把正在输出的日志拷 (copy) 一份出来，再清空 (trucate) 原来的日志；详细步骤如下： 将当前正在输出的日志文件复制为目标文件，此时程序仍然将日志输出到原来文件中，此时，原文件名也没有变。 清空日志文件，原程序仍然还是输出到预案日志文件中，因为清空文件只把文件的内容删除了，而 inode 并没改变，后续日志的输出仍然写入该文件中。 如上所述，对于 copytruncate 也就是先复制一份文件，然后清空原有文件。 通常来说，清空操作比较快，但是如果日志文件太大，那么复制就会比较耗时，从而可能导致部分日志丢失。不过这种方式不需要应用程序的支持即可。 执行文件： /usr/sbin/logrotate 主配置文件: /etc/logrotate.conf 自定义配置文件: /etc/logrotate.d/*.conf 执行状态文件：/var/lib/logrotate/logrotate.status ","date":"2020-06-22","objectID":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:2:3","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["linux","Tools"],"content":"运行 logrotate logrotate 命令格式及常用参数如下所示： logrotate [-dv] [-f|--force] [-s|--state file] config_file .. -d, --debug ：debug 模式，测试配置文件是否有错误，并不会真正执行 rorate 和 compose 操作，但是会打印出整个执行的流程，和调用的脚本等详细信息。 -f, --force ：强制转储文件。 -m, --mail=command ：压缩日志后，发送日志到指定邮箱。 -s, --state=statefile ：使用指定的状态文件。 -v, --verbose ：显示详细转储过程。 通常使用的方法是配合crontab来运行： crontab -e */30 * * * * /usr/sbin/logrotate /etc/logrotate.d/rsyslog \u003e /dev/null 2\u003e\u00261 \u0026 手动调用 logrotate： # 调用 /etc/lograte.d/ 下配置的所有日志 logrotate /etc/logrotate.conf # 要为某个特定的配置调用 logrotate logrotate -d /etc/logrotate.d/log_file # 开启debug模式，不实际生成日志文件。 ","date":"2020-06-22","objectID":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:2:4","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["linux","Tools"],"content":"配置文件详解 这里以系统自带的部分/etc/logrotate.d/rsyslog配置文件为例： /var/log/syslog { rotate 7 daily missingok notifempty delaycompress compress postrotate /usr/lib/rsyslog/rsyslog-rotate endscript } monthly: 日志文件将按月轮循。其它可用值为 daily，weekly 或者 yearly。 rotate 5: 一次将存储 5 个归档日志。对于第六个归档，时间最久的归档将被删除。 compress: 在轮循任务完成后，已轮循的归档将使用 gzip 进行压缩。 delaycompress: 总是与 compress 选项一起用，delaycompress 选项指示 logrotate 不要将最近的归档压缩，压缩 将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。 missingok: 在日志轮循期间，任何错误将被忽略，例如 “文件无法找到” 之类的错误。 notifempty: 如果日志文件为空，轮循不会进行。 create 644 root root: 以指定的权限创建全新的日志文件，同时 logrotate 也会重命名原始日志文件。 postrotate/endscript: 在所有其它指令完成后，postrotate 和 endscript 里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。 其他常用参数： tabooext [+] list:让 logrotate 不转储指定扩展名的文件，缺省的扩展名是.rpm-orig, .rpmsave, v, 和～ missingok:在日志轮循期间，任何错误将被忽略，例如 “文件无法找到” 之类的错误。 size size:当日志文件到达指定的大小时才转储，bytes (缺省) 及 KB (sizek) 或 MB (sizem) copytruncate:用于还在打开中的日志文件，把当前日志备份并截断 nocopytruncate: 备份日志文件但是不截断 create mode owner group : 转储文件，使用指定的文件模式创建新的日志文件 nocreate: 不建立新的日志文件 nodelaycompress: 覆盖 delaycompress 选项，转储同时压缩。 errors address : 专储时的错误信息发送到指定的 Email 地址 ifempty :即使是空文件也转储，这个是 logrotate 的缺省选项。 mail address : 把转储的日志文件发送到指定的 E-mail 地址 nomail : 转储时不发送日志文件 olddir directory:储后的日志文件放入指定的目录，必须和当前日志文件在同一个文件系统 noolddir: 转储后的日志文件和当前日志文件放在同一个目录下 ","date":"2020-06-22","objectID":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:2:5","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["linux","Tools"],"content":"logrotate 日志切割轮询 由于 logrotate 是基于cron运行的，所以这个日志轮转的时间是由 cron 控制的，具体可以查询 cron 的配置文件 /etc/anacrontab，过往的老版本的文件为（/etc/crontab） 使用 crontab 来作为日志轮转的触发容器来修改 logrotate 默认执行时间： $ vim /etc/crontab # 切割时间为每天晚上的12点钟 SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root HOME=/ # run-parts 01 * * * * root run-parts /etc/cron.hourly 59 23 * * * root run-parts /etc/cron.daily 22 4 * * 0 root run-parts /etc/cron.weekly 42 4 1 * * root run-parts /etc/cron.monthly ","date":"2020-06-22","objectID":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:2:6","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["linux","Tools"],"content":"附：logrotate 配置文件示例 syslog [root@gop-sg-192-168-56-103 logrotate.d]# cat syslog /var/log/cron /var/log/maillog /var/log/messages /var/log/secure /var/log/spooler { missingok sharedscripts postrotate /bin/kill -HUP `cat /var/run/syslogd.pid 2\u003e /dev/null` 2\u003e /dev/null || true endscript } zabbix-agent [root@gop-sg-192-168-56-103 logrotate.d]# cat zabbix-agent /var/log/zabbix/zabbix_agentd.log { weekly rotate 12 compress delaycompress missingok notifempty create 0664 zabbix zabbix } nginx [root@gop-sg-192-168-56-103 logrotate.d]# cat nginx /var/log/nginx/*.log /var/log/nginx/*/*.log{ daily missingok rotate 14 compress delaycompress notifempty create 640 root adm sharedscripts postrotate [ ! -f /var/run/nginx.pid ] || kill -USR1 `cat /var/run/nginx.pid` endscript } influxdb [root@gop-sg-192-168-56-103 logrotate.d]# cat influxdb /var/log/influxdb/access.log { daily rotate 7 missingok dateext copytruncate compress } ","date":"2020-06-22","objectID":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/:2:7","tags":["Linux","日志分割","工具"],"title":"Linux 日志分割工具-split和logrotate","uri":"/linux-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2%E5%B7%A5%E5%85%B7/"},{"categories":["Linux"],"content":"WTF和bashtop是我个人目前在用的系统资源管理面板，界面非常的美观，极具极客风范，在这里我分别做简单介绍。 ","date":"2020-06-12","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:0:0","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux"],"content":"WTF WTF（又名“wtfutil”）是终端的个人信息仪表板，可快速访问您非常重要但不常需要的统计信息和数据。 项目地址：https://github.com/wtfutil/wtf 官方站点：https://wtfutil.com/ 先放一张截图吧： WTF截图\" WTF截图 面板中有以下展示模块： 世界时间 我的IP地址信息 TODO List（待办事件） 系统安全状态 当前城市天气 电源使用情况 docker 运行状态 资源使用情况 硬盘占用情况 开机时长 好了，废话不多说，直接开始吧。 ","date":"2020-06-12","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:1:0","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux"],"content":"安装与使用 首先打开项目的 release仓库 下载可直接使用的二进制包. wget https://github.com/wtfutil/wtf/releases/download/v0.30.0/wtf_0.30.0_linux_amd64.tar.gz tar xf wtf_0.30.0_linux_amd64.tar.gz 解压完成之后，直接运行./wtfutil即可，为了日后方便使用，可以将该程序软连接到用户bin目录进行使用： ln -sv /root/wtfutil /usr/bin/ ","date":"2020-06-12","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:1:1","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux"],"content":"配置文件 下面是我的配置文件，配置文件的目录是$HOME/.config/wtf/config.yml，可以拿来参考参考： :information_source:文件比较长，单击»\u003e 这里 «\u003c可直接跳到下一节 wtf:colors:background:blackborder:focusable:darkslatebluefocused:orangenormal:graychecked:yellowhighlight:fore:blackback:grayrows:even:yellowodd:whitegrid:columns:[40,35,35,55]rows:[10,10,10,10,4]refreshInterval:1openFileUtil:\"open\"mods:digitalclock:color:redenabled:truefont:digitalfonthourFormat:24position:top:0left:0height:1width:1refreshInterval:1title:\"big clock\"type:\"digitalclock\"world_time:title:\"World Time\"type:clockscolors:rows:even:\"lightblue\"odd:\"white\"enabled:truelocations:UTC:\"Etc/UTC\"London:\"Europe/London\"Berlin:\"Europe/Berlin\"New_York:\"America/New_York\"China:\"Asia/Shanghai\"position:top:0left:1height:1width:1refreshInterval:15sort:\"alphabetical\"battery:type:powertitle:\"⚡️\"enabled:trueposition:top:1left:3height:1width:1refreshInterval:15todolist:type:todocheckedIcon:\"X\"colors:checked:grayhighlight:fore:\"black\"back:\"orange\"enabled:truefilename:\"todo.yml\"position:top:1left:0height:2width:1refreshInterval:3600ip:type:ipinfotitle:\"My IP\"colors:name:\"lightblue\"value:\"white\"enabled:trueposition:top:0left:2height:1width:2refreshInterval:150prettyweather:enabled:truecity:\"临沂\"position:top:1left:2height:1width:1refreshInterval:300unit:\"m\"view:0language:\"en\"security:enabled:trueposition:top:1left:1height:1width:1refreshInterval:3600docker:type:dockerenabled:truelabelColor:lightblueposition:top:2left:1height:1width:3refreshInterval:1resources:type:resourceusageenabled:trueposition:top:3left:0height:2width:1refreshInterval:1uptime:type:cmdrunnerargs:[\"\"]cmd:\"uptime\"enabled:trueposition:top:4left:1height:1width:3refreshInterval:30disks:type:cmdrunnercmd:\"df\"args:[\"-h\"]enabled:trueposition:top:3left:1height:1width:3refreshInterval:3600 ","date":"2020-06-12","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:1:2","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux"],"content":"官方支持模块 Azure DevOps BambooHR Buildkite CDS CircleCI Clocks CmdRunner Crypto Currencies Datadog DEV (dev.to) Digital Clock DigitalOcean Docker Exchange Rates Feed Reader Gerrit Git GitHub GitLab Gitter Google Apps Hacker News Have I Been Pwned (HIBP) IP Addresses Jenkins Jira Kubernetes Logger Mercurial New Relic OpsGenie Pagerduty Pi-hole Power Resource Usage Rollbar Security Sports Spotify Subreddit Textfile Todo Todoist Transmission TravisCI Trello Twitter VictorOps OnCall Weather Services Zendesk ","date":"2020-06-12","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:1:3","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux"],"content":"bashtop 官方开源仓库：https://github.com/aristocratos/bashtos 截图\" 截图 主菜单： 主菜单\" 主菜单 选项菜单： 选项菜单\" 选项菜单 ","date":"2020-06-12","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:2:0","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux"],"content":"安装与使用 Add PPA repository and install bashtop sudo add-apt-repository ppa:bashtop-monitor/bashtop sudo apt update sudo apt install bashtop 安装完毕之后，直接在终端运行bashtop即可。 使用ESC键可以呼出菜单，按下q键退出。 ","date":"2020-06-12","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:2:1","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux"],"content":"配置文件 All options changeable from within UI. Config files stored in “$HOME/.config/bashtop” folder bashtop.cfg: (auto generated if not found) #? Config file for bashtop v. 0.9.9 #* Color theme, looks for a .theme file in \"$HOME/.config/bashtop/themes\" and \"$HOME/.config/bashtop/user_themes\", \"Default\" for builtin default theme color_theme=\"Default\" #* Update time in milliseconds, increases automatically if set below internal loops processing time, recommended 2000 ms or above for better sample times for graphs update_ms=\"2500\" #* Processes sorting, \"pid\" \"program\" \"arguments\" \"threads\" \"user\" \"memory\" \"cpu lazy\" \"cpu responsive\" \"tree\" #* \"cpu lazy\" updates sorting over time, \"cpu responsive\" updates sorting directly at a cpu usage cost proc_sorting=\"cpu lazy\" #* Reverse sorting order, \"true\" or \"false\" proc_reversed=\"false\" #* Check cpu temperature, only works if \"sensors\", \"vcgencmd\" or \"osx-cpu-temp\" commands is available check_temp=\"true\" #* Draw a clock at top of screen, formatting according to strftime, empty string to disable draw_clock=\"%X\" #* Update main ui when menus are showing, set this to false if the menus is flickering too much for comfort background_update=\"true\" #* Custom cpu model name, empty string to disable custom_cpu_name=\"\" #* Enable error logging to \"$HOME/.config/bashtop/error.log\", \"true\" or \"false\" error_logging=\"true\" #* Show color gradient in process list, \"true\" or \"false\" proc_gradient=\"true\" #* If process cpu usage should be of the core it's running on or usage of the total available cpu power proc_per_core=\"false\" #* Optional filter for shown disks, should be names of mountpoints, \"root\" replaces \"/\", separate multiple values with space disks_filter=\"\" #* Enable check for new version from github.com/aristocratos/bashtop at start update_check=\"true\" #* Enable graphs with double the horizontal resolution, increases cpu usage hires_graphs=\"false\" #* Enable the use of psutil python3 module for data collection, default on OSX use_psutil=\"true\" ","date":"2020-06-12","objectID":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/:2:2","tags":["Linux","监控"],"title":"Linux 系统资源监控面板","uri":"/linux-%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E9%9D%A2%E6%9D%BF/"},{"categories":["Linux"],"content":"[TOC] ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:0:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"通过 openssl 生成 [root@myhost ~]\\# openssl rand -base64 3 xsSp [root@myhost ~]\\# openssl rand -base64 8 8SlHCsBAiYw= [root@myhost ~]\\# openssl rand -base64 10 nUzBw8ngKGGqWw== `openssl rand -base64 32|tr A-Z a-z|cut -c 1-10` ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:1:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"使用 date 命令生成 [root@myhost ~]\\# date +%s 1539071518 [root@myhost ~]\\# date +%N 801398716 [root@myhost ~]\\# date +%s%N 1539071555311467855 `date +%s |sha256sum |base64 |head -c 10 ;echo` ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:2:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"使用 md5sum 生成随机数 date | md5sum ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:3:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"使用 dd 命令生成随机数 dd if=/dev/urandom bs=1 count=15|base64 -w 0 ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:4:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"通过/dev/random设备产生uuid [root@myhost ~]\\# cat /proc/sys/kernel/random/uuid a3dfb0f2-f893-4e57-9d67-184a88d4cb5d [root@myhost ~]\\# cat /proc/sys/kernel/random/uuid |cut -c 1-8 b80c60d8 ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:5:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"使用系统环境变量 RANDOM [root@myhost ~]\\# echo $RANDOM 14535 ##说明：linux系统下的环境变量$RANDOM的取值范围是：0–32767 。 产生0-25范围内的数，用这个环境变量对26取余即可。 [root@myhost ~]\\# echo $(($RANDOM%26)) 6 [root@myhost ~]\\# echo $((RANDOM%26)) 11 ##说明：第二个表达式RANDOM前面无$符号好像也可以。 产生6位数的整数，用这个环境变量加上100000即可。 [root@myhost ~]\\# echo $(($RANDOM+100000)) 117482 [root@myhost ~]\\# echo $((RANDOM+100000)) 126058 ##说明：第二个表达式RANDOM前面无$符号好像也可以。 产生加密的随机数码，将随机数管道给命令md5sum命令即可。 [root@myhost ~]\\# echo $RANDOM |md5sum 6ee8cd13547eb044ad13ba014573af6f - 需要固定位数的随机数码，将随机数管道给命令md5sum命令再管道给cut命令即可。 [root@myhost ~]\\# echo $RANDOM |md5sum|cut -c 1-8 de3cfe23 ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:6:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"使用第三方工具 expect 非交互式程序控制下用mkpasswd命令： yum install -y expect mkpasswd -l 7 # 生成七位密码包含大小写加特殊字符 使用pwgen生成随机可读的密码： yum install pwgen # 生成长度8，含有数字，含有大小写字母的密码4个，列打印 pwgen -ncC 8 4 # 生成长度8，含有数字，含有小写字母，不包含歧义的密码4个，列打印 pwgen -nABC 8 4 # 生成长度16，含有数字，含有大小写字母，含有特殊字符的密码8个，行打印 pwgen -ncy1 16 8 参数说明： -c or –capitalize密码中至少包含一个大写字母 -A or –no-capitalize密码中不包含大写字母 -n or –numerals密码中至少包含一个数字 -0 or –no-numerals密码中不包含数字 -y or –symbols密码中至少包含一个特殊符号 -s or –secure生成完全随机密码 -B or –ambiguous密码中不包含歧义字符（例如1,l,O,0） -H or –sha1=path/to/file[#seed]使用SHA1 hash给定的文件作为一个随机种子 -C在列中打印生成的密码 -1不要在列中打印生成的密码，即一行一个密码 -v or –no-vowels不要使用任何元音，以避免偶然的脏话 其他第三方工具： randpw、spw、gpg、xkcdpass ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:7:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Linux"],"content":"参考链接 https://blog.csdn.net/yuki5233/article/details/82997001 ","date":"2020-06-01","objectID":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/:8:0","tags":["Linux","随机数","openssl"],"title":"Linux 生成随机数","uri":"/linux%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["Tools","Android","Ubuntu"],"content":"跨平台安卓投屏神器","date":"2020-05-28","objectID":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"Scrcpy 简介 应用程序可显示和控制通过USB（或通过TCP / IP）连接的Android设备。它不需要任何根访问权限。它适用于GNU / Linux，Windows和macOS。 github地址：https://github.com/Genymobile/scrcpy ","date":"2020-05-28","objectID":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:1:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"配置环境 安装adb服务，使用数据线连接自己的安卓设备，并查看自己的安卓设备： sudo apt-get install android-tools-adb adb start-server $ lsusb Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 001 Device 005: ID 0bda:0821 Realtek Semiconductor Corp. Bus 001 Device 004: ID 0bda:0129 Realtek Semiconductor Corp. RTS5129 Card Reader Controller Bus 001 Device 003: ID 13d3:a745 IMC Networks Bus 001 Device 054: ID `24ae:1813` ... 找到自己的安卓设备哪一行，24ae、1813在下面会用到。 创建设备文件： 下面命令中的名称71-android是自定义的，我的这个代表安卓7.1的意思。 echo 0x12d1 \u003e ~/.android/adb_usb.ini touch /etc/udev/rules.d/71-android.rules gedit /etc/udev/rules.d/71-android.rules 将以下内容写入刚刚创建的文件，注意，下面的24ae、1813要改成自己的安卓设备的id（见上）： SUBSYSTEM\"usb”, ATTRS{idVendor}“24ae”, ATTRS{idProduct}==\"1813”, MODE=\"0666” 更改文件权限： chmod 666 /etc/udev/rules.d/90-android.rules 重启 ADB 服务： service udev restart adb kill-server adb start-server ","date":"2020-05-28","objectID":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:2:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"Scrcpy 安装与使用 安装： # 使用snap安装 sudo snap install scrcpy # 或者 apt install scrcpy 列出设备： scrcpy.adb devices 开始投屏： scrcpy ","date":"2020-05-28","objectID":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:3:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"设置无线连接Android设备 :information_source:先使用数据线将手机和电脑连接并在手机端开启「开发者选项」及「USB 调试」 # 开启手机端口 adb tcpip 6666 拔出数据线，开启无线连接： adb connect 192.168.8.154:6666 192.168.8.154为你Android设备的IP地址，可以通过路由器后台获取或者在手机上使用相关软件进行获取。 启动 scrcpy ： scrcpy ","date":"2020-05-28","objectID":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:4:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"Scrcpy 快捷键 Action Shortcut Shortcut (macOS) Switch fullscreen mode Ctrl+f Cmd+f Rotate display left Ctrl+← (left) Cmd+← (left) Rotate display right Ctrl+→ (right) Cmd+→ (right) Resize window to 1:1 (pixel-perfect) Ctrl+g Cmd+g Resize window to remove black borders Ctrl+x | Double-click¹ Cmd+x | Double-click¹ Click on HOME Ctrl+h | Middle-click Ctrl+h | Middle-click Click on BACK Ctrl+b | Right-click² Cmd+b | Right-click² Click on APP_SWITCH Ctrl+s Cmd+s Click on MENU Ctrl+m Ctrl+m Click on VOLUME_UP Ctrl+↑ (up) Cmd+↑ (up) Click on VOLUME_DOWN Ctrl+↓ (down) Cmd+↓ (down) Click on POWER Ctrl+p Cmd+p Power on Right-click² Right-click² Turn device screen off (keep mirroring) Ctrl+o Cmd+o Turn device screen on Ctrl+Shift+o Cmd+Shift+o Rotate device screen Ctrl+r Cmd+r Expand notification panel Ctrl+n Cmd+n Collapse notification panel Ctrl+Shift+n Cmd+Shift+n Copy device clipboard to computer Ctrl+c Cmd+c Paste computer clipboard to device Ctrl+v Cmd+v Copy computer clipboard to device and paste Ctrl+Shift+v Cmd+Shift+v Enable/disable FPS counter (on stdout) Ctrl+i Cmd+i ¹Double-click on black borders to remove them. ²Right-click turns the screen on if it was off, presses BACK otherwise. ","date":"2020-05-28","objectID":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:5:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["Tools","Android","Ubuntu"],"content":"参考链接 Scrcpy Documentation: https://github.com/Genymobile/scrcpy ","date":"2020-05-28","objectID":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/:6:0","tags":["Scrcpy","Android"],"title":"Scrcpy Android投屏神器","uri":"/scrcpy-android%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8/"},{"categories":["VPN","CentOS"],"content":"OpenVPN 简介 OpenVPN 是一个基于 OpenSSL 库的应用层 VPN 实现。和传统 VPN 相比，它的优点是简单易用。 [1] OpenVPN允许参与建立VPN的单点使用共享金钥，电子证书，或者用户名/密码来进行身份验证。它大量使用了OpenSSL加密库中的SSLv3/TLSv1 协议函式库。OpenVPN能在Solaris、Linux、OpenBSD、FreeBSD、NetBSD、Mac OS X与Windows 2000/XP/Vista上运行，并包含了许多安全性的功能。它并不是一个基于Web的VPN软件，也不与IPsec及其他VPN软件包兼容。 ","date":"2020-05-21","objectID":"/openvpn-for-centos/:1:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"OpenVPN 安装 ","date":"2020-05-21","objectID":"/openvpn-for-centos/:2:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"使用EasyRSA构建 CA 首先从项目Github存储库下载EasyRSA的最新版本并解压： cd \u0026\u0026 wget https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.5/EasyRSA-nix-3.0.7.tgz tar xzf EasyRSA-3.0.7.tgz 复制模板文件，并进行适当修改： mv EasyRSA-3.0.7 EasyRSA-CA; cd EasyRSA-CA cp vars.example vars # ---------- 编辑 vars 文件内容`95`行左右 ---------- set_var EASYRSA_REQ_COUNTRY \"CN\" set_var EASYRSA_REQ_PROVINCE \"Shandong\" set_var EASYRSA_REQ_CITY \"Jinan\" set_var EASYRSA_REQ_ORG \"AGou\" set_var EASYRSA_REQ_EMAIL \"AGou-ops@foxmail.com\" set_var EASYRSA_REQ_OU \"Community\" 修改完成之后保存退出。 初始化PKI： [root@test EasyRSA-CA]\\# ./easyrsa init-pki Note: using Easy-RSA configuration from: /root/EasyRSA-3.0.7/vars init-pki complete; you may now create a CA or requests. Your newly created PKI dir is: /root/EasyRSA-3.0.7/pki 接下来建立CA： [root@test EasyRSA-CA]\\# ./easyrsa build-ca nopass Note: using Easy-RSA configuration from: /root/EasyRSA-3.0.7/vars Using SSL: openssl OpenSSL 1.0.2k-fips 26 Jan 2017 Generating RSA private key, 2048 bit long modulus ...............+++ ............................................................................................................................+++ e is 65537 (0x10001) You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Common Name (eg: your user, host, or server name) [Easy-RSA CA]: CA creation complete and you may now import and sign cert requests. Your new CA certificate file for publishing is at: /root/EasyRSA-3.0.7/pki/ca.crt 完成后，该脚本将创建两个文件-CA公共证书PKI/ca.crt和CA私钥PKI/private/ca.key ","date":"2020-05-21","objectID":"/openvpn-for-centos/:2:1","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"安装 OpenVPN 和 EasyRSA 可以在 OpenVPN 的官方 github 仓库 下载最新源码包进行编译安装，在这里为了方便，我使用epel仓库进行安装： yum install epel-release -y yum install openvpn -y 获取最新版本的EasyRSA： cd \u0026\u0026 wget https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.5/EasyRSA-nix-3.0.7.tgz tar xzf EasyRSA-3.0.7.tgz mv EasyRSA-3.0.7 EasyRSA-Sever1 cd EasyRSA-Sever1 尽管我们已经在 CA 主机上初始化了PKI，但是我们还需要在 OpenVPN 服务器上创建一个新的 PKI ： [root@test EasyRSA-Server1]\\# ./easyrsa init-pki Note: using Easy-RSA configuration from: /root/EasyRSA-Server1/vars init-pki complete; you may now create a CA or requests. Your newly created PKI dir is: /root/EasyRSA-Server1/pki ","date":"2020-05-21","objectID":"/openvpn-for-centos/:2:2","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"创建Diffie-Hellman和HMAC密钥 生成一个Diffie-Hellman密钥，该密钥将在密钥交换期间使用，并使用HMAC签名文件为连接添加附加的安全层。 在OpenVPN服务器上，生成Diffie-Hellman密钥： cd ~/EasyRSA-Server1 ./easyrsa gen-dh 复制该文件到/etc/openvpn目录中去： cp /root/EasyRSA-Server1/pki/dh.pem /etc/openvpn 接下来，使用openvpn二进制文件生成HMAC签名： openvpn --genkey --secret ta.key 然后将生成的ta.key复制到/etc/openvpn目录中去： cp ta.key /etc/openvpn ","date":"2020-05-21","objectID":"/openvpn-for-centos/:2:3","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"创建服务器证书和私钥 进入OpenVPN服务器上的EasyRSA目录，并为服务器和证书请求文件生成一个新的私钥： cd ~/EasyRSA-Server1 ./easyrsa gen-req server1 nopass 该命令将创建两个文件，一个私钥（server1.key）和一个证书请求文件（server1.req） 将生成的私钥复制到/etc/openvpn目录： cp /root/EasyRSA-Server1/pki/private/server1.key /etc/openvpn/ 将证书请求发送到CA主机（这里我CA主机与OpenVPN为同一主机）： cp ~/EasyRSA-Server1/pki/reqs/server1.req /tmp 登录CA主机，切换到 EasyRSA 目录并导入证书请求文件： cd ~/EasyRSA-CA ./easyrsa import-req /tmp/server1.req server1 此命令只是将请求文件复制到pki/reqs目录中。 在CA主机上，签署证书： ./easyrsa sign-req server server1 确认信息无误之后，输入 yes 然后点击回车即可。 在CA主机上，将签名的证书server1.crt和ca.crt文件传发送回OpenVPN主机： cp ~/EasyRSA-CA/pki/issued/server1.crt /etc/openvpn/ cp ~/EasyRSA-CA/pki/ca.crt /etc/openvpn/ :warning: 这里需要注意的是：我的CA主机和OpenVPN主机是同一主机，所以上面的/etc/openvpn目录是OpenVPN主机的。 所有步骤都完成之后，在/etc/openvpn目录下应当有这些文件存在： [root@test EasyRSA-CA]\\# ls /etc/openvpn/ ca.crt client dh.pem server server1.crt server1.key ta.key ","date":"2020-05-21","objectID":"/openvpn-for-centos/:2:4","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"配置OpenVPN服务 将 OpenVPN 的模板配置文件复制到/etc/openvpn： cp /usr/share/doc/openvpn-2.4.9/sample/sample-config-files/server.conf /etc/openvpn/server1.conf 修改server1.conf，找到证书，密钥和DH参数指令并更改文件名： user nobody group nogroup # ---------- 大约在78行左右 ---------- cert server1.crt key server1.key dh dh.pem # 在文件末尾添加以下行。该指令会将消息身份验证算法（HMAC）从SHA1更改为SHA256 auth SHA256 :information_source:可选： 要通过VPN重定向客户端流量，请找到并取消注释redirect-gateway和dhcp-option选项： /etc/openvpn/server1.conf push \"redirect-gateway def1 bypass-dhcp\" push \"dhcp-option DNS 208.67.222.222\" push \"dhcp-option DNS 208.67.220.220\" 默认情况下，使用OpenDNS解析器。您可以更改它并使用CloudFlare，Google或您想要的任何其他DNS解析器。 完整配置文件参考： port 1194 proto udp dev tun ca ca.crt cert server1.crt key server1.key # This file should be kept secret dh dh.pem server 10.8.0.0 255.255.255.0 ifconfig-pool-persist ipp.txt push \"redirect-gateway def1 bypass-dhcp\" push \"dhcp-option DNS 208.67.222.222\" push \"dhcp-option DNS 208.67.220.220\" keepalive 10 120 tls-auth ta.key 0 # This file is secret cipher AES-256-CBC user nobody group nobody persist-key persist-tun status openvpn-status.log verb 3 explicit-exit-notify 1 auth SHA256 ","date":"2020-05-21","objectID":"/openvpn-for-centos/:2:5","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"启动 OpenVPN 服务 systemctl start openvpn@server1 成功启动之后，OpenVPN Server 会创建一个 tun 设备，即tun0： [root@test openvpn]\\# ip a show tun0 3: tun0: \u003cPOINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP\u003e mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 100 link/none inet 10.8.0.1 peer 10.8.0.2/32 scope global tun0 valid_lft forever preferred_lft forever inet6 fe80::afaa:c6f7:7ae8:3a76/64 scope link flags 800 valid_lft forever preferred_lft forever 为了正确转发网络数据包，我们需要启用IP转发： echo \"net.ipv4.ip_forward = 1\" \u003e\u003e /etc/sysctl.conf sysctl -p ","date":"2020-05-21","objectID":"/openvpn-for-centos/:2:6","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"配置客户端接口 创建一个单独的SSL证书，并为每个VPN客户端生成一个不同的配置文件。 客户端私钥和证书请求可以在客户端计算机或服务器上生成。为简单起见，我们将在服务器上生成证书请求，然后将其发送到CA进行签名。 生成客户端证书和配置文件的整个过程如下： 在OpenVPN服务器上生成私钥和证书请求； 将请求发送到要签名的CA计算机； 将签名的SSL证书复制到OpenVPN服务器并生成配置文件； 将配置文件发送到VPN客户端的计算机。 首先，在OpenVPN主机上创建一组目录来存放客户端文件： mkdir -p ~/openvpn-clients/{configs,base,files} base 目录将存储将在所有客户端文件之间共享的基本文件和配置； configs 目录将存储生成的客户端配置； files 目录将存储特定于客户端的证书/密钥对。 复制ca.crt和ta.key文件到~/openvpn-clients/base目录： cp ~/EasyRSA-Server1/ta.key ~/openvpn-clients/base/ cp /etc/openvpn/ca.crt ~/openvpn-clients/base/ 将示例客户端配置文件复制到~/openvpn-clients/base/目录下： cp /usr/share/doc/openvpn-2.4.9/sample/sample-config-files/client.conf ~/openvpn-clients/base/ 编辑client.conf文件以匹配我们的服务器配置： remote 172.16.1.131 1194 # 在文件结尾添加以下内容 auth SHA256 key-direction 1 完整配置文件参考如下所示： client dev tun proto udp remote 172.16.1.131 1194 resolv-retry infinite nobind persist-key persist-tun remote-cert-tls server cipher AES-256-CBC verb 3 auth SHA256 key-direction 1 接下来，创建一个简单的bash脚本，它将基本配置和文件与客户端证书和密钥合并，并将生成的配置存储在~/openvpn-clients/configs目录中： vim ~/openvpn-clients/gen_config.sh #!/bin/bash FILES_DIR=$HOME/openvpn-clients/files BASE_DIR=$HOME/openvpn-clients/base CONFIGS_DIR=$HOME/openvpn-clients/configs BASE_CONF=${BASE_DIR}/client.conf CA_FILE=${BASE_DIR}/ca.crt TA_FILE=${BASE_DIR}/ta.key CLIENT_CERT=${FILES_DIR}/${1}.crt CLIENT_KEY=${FILES_DIR}/${1}.key # Test for files for i in \"$BASE_CONF\" \"$CA_FILE\" \"$TA_FILE\" \"$CLIENT_CERT\" \"$CLIENT_KEY\"; do if [[ ! -f $i ]]; then echo \" The file $idoes not exist\" exit 1 fi if [[ ! -r $i ]]; then echo \" The file $iis not readable.\" exit 1 fi done # Generate client config cat \u003e ${CONFIGS_DIR}/${1}.ovpn \u003c\u003cEOF $(cat ${BASE_CONF}) \u003ckey\u003e $(cat ${CLIENT_KEY}) \u003c/key\u003e \u003ccert\u003e $(cat ${CLIENT_CERT}) \u003c/cert\u003e \u003cca\u003e $(cat ${CA_FILE}) \u003c/ca\u003e \u003ctls-auth\u003e $(cat ${TA_FILE}) \u003c/tls-auth\u003e EOF 赋予执行权限： chmod +x ~/openvpn-clients/gen_config.sh ","date":"2020-05-21","objectID":"/openvpn-for-centos/:3:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"创建客户端证书私钥和配置 生成客户端私钥和证书请求的过程与生成服务器密钥和证书请求的过程相同。 登录OpenVPN主机为客户端生成一个新的私钥和一个证书请求： cd ~/EasyRSA-Server1 ./easyrsa gen-req client1 nopass 将私钥client1.key复制到~/openvpn-clients/files中： cp ~/EasyRSA-Server1/pki/private/client1.key ~/openvpn-clients/files/ 将证书请求文件传输到CA主机： cp ~/EasyRSA-Server1/pki/reqs/client1.req /tmp 进入CA主机，导入证书请求并进行签署： cd ~/EasyRSA-CA ./easyrsa import-req /tmp/client1.req client1 ./easyrsa sign-req client client1 接下来，将签好名的证书client1.crt文件发送回OpenVPN主机： cp ~/EasyRSA-CA/pki/issued/client1.crt ~/openvpn-clients/files 最后一步是使用gen_config.sh脚本生成客户端配置，切换到~/openvpn-clients目录并使用客户端名称作为参数运行脚本： cd ~/openvpn-clients ./gen_config.sh client1 该脚本将在~/client-configs/configs目录中创建一个名为client1.ovpn的文件： [root@test openvpn-clients]\\# ls ~/openvpn-clients/configs client1.ovpn 此时，客户端配置已创建，可以直接将配置文件传输到要用作客户端的设备上。 如果想要添加其他的客户端，重复这些步骤即可。 ","date":"2020-05-21","objectID":"/openvpn-for-centos/:4:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"使用 OpenVPN 在Debian系系统下： sudo apt update -y \u0026\u0026 sudo apt instal openvpn 安装完软件包之后，使用以下命令连接到OpenVPN服务器： sudo openvpn --config client1.ovpn ","date":"2020-05-21","objectID":"/openvpn-for-centos/:5:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","CentOS"],"content":"快速安装 OpenVPN sudo apt update -y sudo apt install -y openvpn 从 github 获取一键安装脚本: git clone https://github.com/angristan/openvpn-install.git cd openvpn-install 赋予脚本可执行权限: chmod +x openvpn-install 执行脚本: AUTO_INSTALL=y ./openvpn-install.sh :warning: 注意: 在客户端使用 OpenVPN 时, 要确保服务器端的 OpenVPN 监听的端口处于放行状态. Linux 客户端使用: sudo apt install network-manager-openvpn sudo openvpn ./client.ovpn Windows 客户端使用: 直接去OpenVPN 官方下载站点下载然后导入客户端配置文件 client.ovpn, 然后启动服务即可. ","date":"2020-05-21","objectID":"/openvpn-for-centos/:6:0","tags":["OpenVPN","CentOS"],"title":"OpenVPN for CentOS","uri":"/openvpn-for-centos/"},{"categories":["VPN","Ubuntu"],"content":"WireGuard 简介 ​ WireGuard是具有最新加密技术的现代VPN（虚拟专用网）技术。与IPsec和OpenVPN等其他类似解决方案相比，WireGuard更快，更易于配置且性能更高。它是一个跨平台，几乎可以在任何地方运行，包括Linux，Windows，Android和macOS。 Wireguard是对等VPN。它不使用客户端-服务器模型。根据其配置，对等方可以充当传统的服务器或客户端。 WireGuard通过在充当隧道的每个对等设备上创建网络接口来工作。对等体通过交换和验证公共密钥（类似于SSH模型）来相互认证。公钥与隧道中允许的IP地址列表进行映射。 VPN流量封装在UDP中。在本教程中，我们将在充当VPN服务器的Ubuntu 18.04计算机上设置WireGuard。我们还将向您展示如何将WireGuard配置为客户端。客户端的流量将通过Ubuntu 18.04服务器进行路由。此设置可用于防御中间人攻击，匿名浏览网络，绕过受地域限制的内容，或允许您的同事在远程工作时安全地连接到公司网络。 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:1:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"WG安装 更新软件包列表，并安装管理系统存储库所需的工具： sudo apt update sudo apt install software-properties-common 添加 WireGuard 仓库： sudo add-apt-repository ppa:wireguard/wireguard 出现提示时，按Enter键继续。 add-apt-repository也将自动更新软件包列表。 安装WireGuard软件包： sudo apt install wireguard WireGuard作为内核模块运行，该模块被编译为DKMS模块。成功完成后，您将看到以下输出： wireguard: Running module version sanity check. - Original module - No original module exists within this kernel - Installation - Installing to /lib/modules/4.15.0-88-generic/updates/dkms/ depmod... DKMS: install completed. 更新内核时，需要将针对新内核编译WireGuard模块。 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:2:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"配置WG WireGuard 程序包附带了两个名为wg和wg-quick的命令行工具，可用于配置和管理WireGuard接口。 运行以下命令以生成公钥和私钥： wg genkey | sudo tee /etc/wireguard/privatekey | wg pubkey | sudo tee /etc/wireguard/publickey :information_source: 公私钥放置于/etc/wireguard目录,其中私钥绝对不能与任何人共享 生成密钥后，我们需要配置路由VPN的隧道设备 可以使用ip和wg从命令行设置设备，也可以使用文本编辑器创建配置文件。 创建一个名为wg0.conf(文件名可以随意)的新文件，并添加以下内容： cat \u003e\u003e /etc/wireguard/wg0.conf \u003c\u003c EOF [Interface] Address = 192.168.159.0/24 # 填写网络地址段 SaveConfig = true # 关闭时，接口的当前状态将保存到配置文件中 ListenPort = 51820 # 监听端口 PrivateKey = QNKQCtPo2E5saDnXORaIORhZH6NtcvIJPHqF9EdEL1o= # 私钥文件,即/etc/wireguard/privatekey PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o ens33 -j MASQUERADE # 在启动之前执行的命令或脚本,使用iptables启用伪装,允许流量离开服务器，从而使VPN客户端可以访问Internet。 PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o ens33 -j MASQUERADE # 在启动之后执行的命令或脚本,接口关闭后，iptables规则将被删除 EOF 修改privatekey和wg0.conf的权限, 保证其安全性： sudo chmod 600 /etc/wireguard/{privatekey,wg0.conf} 完成后，使用配置文件中指定的属性启动wg0接口： $ sudo wg-quick up wg0 * 输出内容如下所示: [#] ip link add wg0 type wireguard [#] wg setconf wg0 /dev/fd/63 [#] ip -4 address add 192.168.159.0/24 dev wg0 [#] ip link set mtu 1420 up dev wg0 [#] iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o ens33 -j MASQUERADE 运行wg show wg0检查接口状态和配置： $ sudo wg show wg0 * 输出内容如下所示: interface: wg0 public key: uD6Xex2eP5CEUVcVP3EZB5csh2JReWXthoVZMzURwCQ= private key: (hidden) listening port: 51820 也可以运行ip a show wg0来验证接口状态： $ ip a show wg0 * 输出内容如下所示: 4: wg0: \u003cPOINTOPOINT,NOARP,UP,LOWER_UP\u003e mtu 1420 qdisc noqueue state UNKNOWN group default qlen 1000 link/none inet 192.168.159.0/24 scope global wg0 valid_lft forever preferred_lft forever 设置wireguard 开机自启: sudo systemctl enable wg-quick@wg0 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:3:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"服务器网络和防火墙配置 为了使NAT正常工作，我们需要启用IP转发，打开/etc/sysctl.conf文件，并添加或取消注释以下行： ... net.ipv4.ip_forward=1 ... 修改完成之后, 执行sudo sysctl -p使配置永久生效 如果你使用UFW来管理防火墙，则需要在端口51820上打开UDP通信： sudo ufw allow 51820/udp 至此,WG SERVER 已完成配置 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:4:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"客户端配置 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:5:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"Linux \u0026 macOS 去往官方下载站点(https://wireguard.com/install/), 查看如何安装WireGuard macOS App Store: https://apps.apple.com/us/app/wireguard/id1441195209?ls=1 Ubuntu ≤ 19.04 [module – v1.0.20200413 \u0026 tools – v1.0.20200319] $ sudo add-apt-repository ppa:wireguard/wireguard $ sudo apt-get update $ sudo apt-get install wireguard 设置Linux和macOS客户端过程基本相同, 首先生成公钥与私钥 wg genkey | sudo tee /etc/wireguard/privatekey | wg pubkey | sudo tee /etc/wireguard/publickey 创建/etc/wireguard/wg0.conf并添加以下内容: [Interface] PrivateKey = CLIENT_PRIVATE_KEY # /etc/wireguard/privatekey Address = 192.168.43.0/24 [Peer] PublicKey = SERVER_PUBLIC_KEY # /etc/wireguard/publickey Endpoint = SERVER_IP_ADDRESS:51820 # 对方wireguard server的ip和端口 AllowedIPs = 0.0.0.0/0 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:5:1","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"Windows 直接下载客户端工具: https://download.wireguard.com/windows-client/wireguard-amd64-0.1.0.msi 安装好软件之后, 点击左下角的Add Tunnel, 创建一个新的隧道Create new tunnel name随便起喽, 内容如下: [Interface] PrivateKey = MOeXEby5OG1xQBCP9AJEJEsxmxYDG1FHHzlcOgi/ClI= Address = 192.168.43.0/24 [Peer] PublicKey = uD6Xex2eP5CEUVcVP3EZB5csh2JReWXthoVZMzURwCQ= # 服务器端公钥 Endpoint = 192.168.159.132:51820 # 服务器ip以及端口 AllowedIPs = 0.0.0.0/0 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:5:2","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"将客户端对等方添加到服务器 最后一步是将客户端公钥和IP地址添加到服务器： # sudo wg set wg0 peer CLIENT_PUBLIC_KEY allowed-ips 10.0.0.2 sudo wg set wg0 peer T5ZTibLaWh9/3EzA1ZfCdiojM0HfXvh99mfVlqHpaU0= allowed-ips 192.168.43.0/24 sudo wg set wg0 peer UqF/BDwShHFulAUN4yx0latMIiIW0Cbb+IuNHEYEBj0= allowed-ips 192.168.43.0/24 确保使用在客户端计算机上生成的公用密钥·（sudo cat /etc/wireguard/publickey）·更改CLIENT_PUBLIC_KEY并调整客户端IP地址（如果不同的话），Windows用户可以从WireGuard软件当中复制公钥 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:6:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"Linux 和 macos 客户端 在Linux客户端上，运行以下命令以打开界面： sudo wg-quick up wg0 现在，应该已连接到Ubuntu服务器，并且来自客户端计算机的流量应通过该服务器进行路由，可以使用以下方法检查连接： $ sudo wg * 输出内容如下所示： interface: wg0 public key: sZThYo/0oECwzUsIKTa6LYXLhk+Jb/nqK4kCCP2pyFg= private key: (hidden) listening port: 48052 fwmark: 0xca6c peer: r3imyh3MCYggaZACmkx+CxlD6uAmICI8pe/PGq8+qCg= endpoint: XXX.XXX.XXX.XXX:51820 allowed ips: 0.0.0.0/0 latest handshake: 1 minute, 22 seconds ago transfer: 58.43 KiB received, 70.82 KiB sent 停止和关闭隧道： sudo wg-quick down wg0 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:6:1","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"Windows 客户端 点击软件上的Activate 即可 ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:6:2","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"一键安装 wireguard https://github.com/angristan/wireguard-install https://github.com/l-n-s/wireguard-install ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:7:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":["VPN","Ubuntu"],"content":"参考链接 wireguard Quick Start : https://www.wireguard.com/quickstart/ wireguard Install : https://www.wireguard.com/install/ ","date":"2020-05-19","objectID":"/wireguard-vpn-for-ubuntu/:8:0","tags":["VPN","WireGuard","Ubuntu"],"title":"WireGuard VPN for Ubuntu","uri":"/wireguard-vpn-for-ubuntu/"},{"categories":[],"content":"Markdown is created by Daring Fireball, the original guideline is here. Its syntax, however, varies between different parsers or editors. Please note that HTML fragments in markdown source will be recognized but not parsed or rendered. Also, there may be small reformatting on the original markdown source code after saving. ","date":"2020-04-16","objectID":"/hello-world/:0:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Paragraph and line breaks(段落与换行) A paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by more than one blank lines. In Typora, you only need to press Return to create a new paragraph. Press Shift + Return to create a single line break. However, most markdown parser will ignore single line break, to make other markdown parsers recognize your line break, you can leave two whitespace at the end of the line, or insert \u003cbr/\u003e. ","date":"2020-04-16","objectID":"/hello-world/:1:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Headers(标题) Headers use 1-6 hash characters at the start of the line, corresponding to header levels 1-6. For example: # This is an H1 ## This is an H2 ###### This is an H6 In typora, input ‘#’s followed by title content, and press Return key will create a header. ","date":"2020-04-16","objectID":"/hello-world/:2:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Blockquotes(引言) Markdown uses email-style \u003e characters for block quoting. They are presented as: This is a blockquote with two paragraphs. This is first paragraph. This is second pragraph.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. This is another blockquote with one paragraph. There is three empty line to seperate two blockquote. 这是一段中文测试。 In typora, just input ‘\u003e’ followed by quote contents a block quote is generated. Typora will insert proper ‘\u003e’ or line break for you. Block quote inside anther block quote is allowed by adding additional levels of ‘\u003e’. ","date":"2020-04-16","objectID":"/hello-world/:3:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Lists(有序无序列表) Input * list item 1 will create an un-ordered list, the * symbol can be replace with + or -. Input 1. list item 1 will create an ordered list, their markdown source code is like: Red Green Blue Red Green Blue ","date":"2020-04-16","objectID":"/hello-world/:4:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Task List(任务列表) Task lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example: a task list item list syntax required normal formatting, @mentions, #1234 refs incomplete completed You can change the complete/incomplete state by click the checkbox before the item. ","date":"2020-04-16","objectID":"/hello-world/:5:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Syntax Highlighting(代码高亮) function helloWorld () { alert(\"Hello, World!\") } public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } } ","date":"2020-04-16","objectID":"/hello-world/:6:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Math Blocks(数学块) You can render LaTeX mathematical expressions using MathJax. Input $$, then press ‘Return’ key will trigger an input field which accept Tex/LaTex source. Following is an example: $$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} \u0026 \\mathbf{j} \u0026 \\mathbf{k} \\ \\frac{\\partial X}{\\partial u} \u0026 \\frac{\\partial Y}{\\partial u} \u0026 0 \\ \\frac{\\partial X}{\\partial v} \u0026 \\frac{\\partial Y}{\\partial v} \u0026 0 \\ \\end{vmatrix} $$ In markdown source file, math block is LaTeX expression wrapped by ‘$$’ mark: $$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} \u0026 \\mathbf{j} \u0026 \\mathbf{k} \\\\ \\frac{\\partial X}{\\partial u} \u0026 \\frac{\\partial Y}{\\partial u} \u0026 0 \\\\ \\frac{\\partial X}{\\partial v} \u0026 \\frac{\\partial Y}{\\partial v} \u0026 0 \\\\ \\end{vmatrix} $$ ","date":"2020-04-16","objectID":"/hello-world/:7:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Tables(表格) Input | First Header | Second Header | and press return key will create a table with two column. After table is created, focus on that table will pop up a toolbar for table, where you can resize, align, or delete table. You can also use context menu to copy and add/delete column/row. Following descriptions can be skipped, as markdown source code for tables are generated by typora automatically. In markdown source code, they look like: | Name | Markdown | HTML tag | | ----------------- | ------------------- | -------------------- | | *Emphasis* | `*Emphasis*` | `\u003cem\u003e\u003c/em\u003e` | | **Strong** | `**Strong**` | `\u003cstrong\u003e\u003c/strong\u003e` | | `code` | ``code`` | `\u003ccode\u003e\u003c/code\u003e` | | ~~Strikethrough~~ | `~~Strikethrough~~` | `\u003cdel\u003e\u003c/del` | | \u003cu\u003eUnderline\u003c/u\u003e | `\u003cu\u003eunderline\u003c/u\u003e` | `\u003cu\u003e\u003c/u\u003e` | Name Markdown HTML tag Emphasis *Emphasis* \u003cem\u003e\u003c/em\u003e Strong **Strong** \u003cstrong\u003e\u003c/strong\u003e code `code` \u003ccode\u003e\u003c/code\u003e Strikethrough ~~Strikethrough~~ \u003cdel\u003e\u003c/del Underline \u003cu\u003eunderline\u003c/u\u003e \u003cu\u003e\u003c/u\u003e ","date":"2020-04-16","objectID":"/hello-world/:8:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Footnotes(注释) You can create footnotes like this[^footnote]. [^footnote]: Here is the *text* of the **footnote**. will produce: You can create footnotes like this1. Mouse on the ‘footnote’ superscript to see content of the footnote. ","date":"2020-04-16","objectID":"/hello-world/:9:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Horizontal Rules(水平线) Input *** or --- on a blank line and press return will draw a horizontal line. ","date":"2020-04-16","objectID":"/hello-world/:10:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Links(超链接) Markdown supports two style of links: inline and reference. In both styles, the link text is delimited by [square brackets]. To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example: This is [an example](http://example.com/ \"Title\") inline link. [This link](http://example.net/) has no title attribute. will produce: This is an example inline link. (\u003cp\u003eThis is \u003ca href=\"http://example.com/\" title=\"Title\"\u003e) This link has no title attribute. (\u003cp\u003e\u003ca href=\"http://example.net/\"\u003eThis link\u003c/a\u003e has no) ","date":"2020-04-16","objectID":"/hello-world/:11:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Internal Links(页内链接) You can set the href to headers, which will create a bookmark that allow you to jump to that section after clicking. For example: Command(on Windows: Ctrl) + Click This link will jump to header Block Elements. To see how to write that, please move cursor or click that link with ⌘ key pressed to expand the element into markdown source. ","date":"2020-04-16","objectID":"/hello-world/:11:1","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Reference Links(参考链接) Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link: This is [an example][id] reference-style link. Then, anywhere in the document, you define your link label like this, on a line by itself: [id]: http://example.com/ \"Optional Title Here\" In typora, they will be rendered like: This is an example reference-style link. The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — e.g., to link the word “Google” to the google.com web site, you could simply write: [Google][] And then define the link: [Google]: http://google.com/ In typora click link will expand it for editing, command+click will open the hyperlink in web browser. ","date":"2020-04-16","objectID":"/hello-world/:11:2","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"URLs Typora allows you to insert urls as links, wrapped by \u003cbrackets\u003e. \u003ci@typora.io\u003e becomes i@typora.io. Typora will aslo auto link standard URLs. e.g: www.google.com. ","date":"2020-04-16","objectID":"/hello-world/:12:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Images(图片) Image looks similar with links, but it requires an additional ! char before the start of link. Image syntax looks like this: ![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg \"Optional title\") You are able to use drag \u0026 drop to insert image from image file or we browser. And modify the markdown source code by clicking on the image. Relative path will be used if image is in same directory or sub-directory with current editing document when drag \u0026 drop. For more tips on images, please read http://support.typora.io//Images/ ","date":"2020-04-16","objectID":"/hello-world/:13:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Emphasis(突出强调) Markdown treats asterisks (*) and underscores (_) as indicators of emphasis. Text wrapped with one * or _ will be wrapped with an HTML \u003cem\u003e tag. E.g: *single asterisks* _single underscores_ output: single asterisks single underscores GFM will ignores underscores in words, which is commonly used in code and names, like this: wow_great_stuff do_this_and_do_that_and_another_thing. To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it: \\*this text is surrounded by literal asterisks\\* Typora recommends to use * symbol. ","date":"2020-04-16","objectID":"/hello-world/:14:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Strong(加粗) double *’s or _’s will be wrapped with an HTML \u003cstrong\u003e tag, e.g: **double asterisks** __double underscores__ output: double asterisks double underscores Typora recommends to use ** symbol. ","date":"2020-04-16","objectID":"/hello-world/:15:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Code(代码块) To indicate a span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example: Use the `printf()` function. will produce: Use the printf() function. ","date":"2020-04-16","objectID":"/hello-world/:16:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"highlight shortcode(高亮代码块) example: {{\u003c highlight go \"linenos=table,hl_lines=8 15-17,linenostart=199\" \u003e}} // ... code {{\u003c /highlight \u003e}} result: // GetTitleFunc returns a func that can be used to transform a string to // title case. // // The supported styles are // // - \"Go\" (strings.Title) // - \"AP\" (see https://www.apstylebook.com/) // - \"Chicago\" (see http://www.chicagomanualofstyle.org/home.html) // // If an unknown or empty style is provided, AP style is what you get. func GetTitleFunc(style string) func(s string) string { switch strings.ToLower(style) { case \"go\": return strings.Title case \"chicago\": tc := transform.NewTitleConverter(transform.ChicagoStyle) return tc.Title default: tc := transform.NewTitleConverter(transform.APStyle) return tc.Title } } ","date":"2020-04-16","objectID":"/hello-world/:17:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Strikethrough(删除线) GFM adds syntax to create strikethrough text, which is missing from standard Markdown. ~~Mistaken text.~~ becomes Mistaken text. ","date":"2020-04-16","objectID":"/hello-world/:18:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Underline(下划线) Underline is powered by raw HTML. \u003cu\u003eUnderline\u003c/u\u003e becomes Underline. ","date":"2020-04-16","objectID":"/hello-world/:19:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Emoji :happy:(表情) Input emoji with syntax :smile:. User can trigger auto-complete suggestions for emoji by pressing ESC key, or trigger it automatically after enable it on preference panel. Also, input UTF8 emoji char directly from Edit -\u003e Emoji \u0026 Symbols from menu bar is also supported. ","date":"2020-04-16","objectID":"/hello-world/:20:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":[],"content":"Inline Math To use this feature, first, please enable it in Preference Panel -\u003e Markdown Tab. Then use $ to wrap TeX command, for example: $\\lim_{x \\to \\infty} \\exp(-x) = 0$ will be rendered as LaTeX command. To trigger inline preview for inline math: input “$”, then press ESC key, then input TeX command, a preview tooltip will be visible like below: Here is the text of the footnote. ↩︎ ","date":"2020-04-16","objectID":"/hello-world/:21:0","tags":[],"title":"Hello World","uri":"/hello-world/"},{"categories":["Markdown"],"content":"这篇文章展示了基本的 Markdown 语法和格式.","date":"2019-12-01","objectID":"/basic-markdown-syntax/","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例. 注意 这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 Loveit 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. 事实上, 编写 Web 内容很麻烦. WYSIWYG所见即所得 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑. 没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式. 一些主要好处是: Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说: Markdown 格式的首要设计目标是更具可读性. 最初的想法是 Markdown 格式的文档应当以纯文本形式发布, 而不会看起来像被标签或格式说明所标记. 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响, 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式. – John Gruber 话不多说, 我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式! 技巧  将此页保存为书签，以备将来参考! ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:0:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"1 标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃: ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样: \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID 要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中: ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样: \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:1:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"2 注释 注释是和 HTML 兼容的： \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:2:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"3 水平线 HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的. 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签: ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:3:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"4 段落 按照纯文本的方式书写段落, 纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹. 如下段落: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e 可以使用一个空白行进行换行. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:4:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"5 内联 HTML 元素 如果你需要某个 HTML 标签 (带有一个类), 则可以简单地像这样使用: Markdown 格式的段落. \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:5:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"6 强调 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: \u003cstrong\u003e渲染为粗体\u003c/strong\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: \u003cem\u003e渲染为斜体\u003c/em\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: \u003cdel\u003e这段文本带有删除线.\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗, 斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"7 引用 用于在文档中引用其他来源的内容块. 在要引用的任何文本之前添加 \u003e: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:7:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"8 列表 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: * 一项内容 - 一项内容 + 一项内容 例如: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e 技巧 如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框，请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"9 代码 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"行内代码 用 ` 包装行内代码段. 在这个例子中, `\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 输出的 HTML 看起来像这样: \u003cp\u003e 在这个例子中, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e. \u003c/p\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"缩进代码 将几行代码缩进至少四个空格，例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments line 1 of code line 2 of code line 3 of code 输出的 HTML 看起来像这样: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它，只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意 Hugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"10 表格 通过在每个单元格之间添加竖线作为分隔线, 并在标题下添加一行破折号 (也由竖线分隔) 来创建表格. 注意, 竖线不需要垂直对齐. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e 文本右对齐或居中对齐 在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐. 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:10:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"11 链接 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"基本链接 \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上，没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage 输出的 HTML 看起来像这样: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. 注意 定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"12 脚注 脚注使你可以添加注释和参考, 而不会使文档正文混乱. 当你创建脚注时, 会在添加脚注引用的位置出现带有链接的上标编号. 读者可以单击链接以跳至页面底部的脚注内容. 要创建脚注引用, 请在方括号中添加插入符号和标识符 ([^1]). 标识符可以是数字或单词, 但不能包含空格或制表符. 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中, 脚注按顺序编号. 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注). 你不一定要在文档末尾添加脚注. 可以将它们放在除列表, 引用和表格等元素之外的任何位置. 这是一个数字脚注[^1]. 这是一个带标签的脚注[^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注1. 这是一个带标签的脚注2 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:12:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"13 图片 图片的语法与链接相似, 但包含一个在前面的感叹号. ![Minion](https://octodex.github.com/images/minion.png) 或者: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The StormtroopocatAlt text \" The Stormtroopocat 像链接一样, 图片也具有脚注样式的语法: ![Alt text][id] The DojocatAlt text \" The Dojocat 稍后在文档中提供参考内容, 用来定义 URL 的位置: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" 技巧 LoveIt 主题提供了一个包含更多功能的 图片的 shortcode. 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:13:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":null,"content":"岂能尽如人意，但求无愧我心。 本站地址：http://x.agou-ops.top 备用地址：https://agou-ops.github.io my Docs：https://agou-ops.top/beforeWork Docs 备用站点：https://d.agou-ops.top myStudyNote:https://agou-ops.top/myStudyNote ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":["docs","shortcodes","index"],"content":"What a Shortcode is Hugo loves Markdown because of its simple content format, but there are times when Markdown falls short. Often, content authors are forced to add raw HTML (e.g., video \u003ciframes\u003e) to Markdown content. We think this contradicts the beautiful simplicity of Markdown’s syntax. Hugo created shortcodes to circumvent these limitations. A shortcode is a simple snippet inside a content file that Hugo will render using a predefined template. Note that shortcodes will not work in template files. If you need the type of drop-in functionality that shortcodes provide but in a template, you most likely want a [partial template][partials] instead. In addition to cleaner Markdown, shortcodes can be updated any time to reflect new classes, techniques, or standards. At the point of site generation, Hugo shortcodes will easily merge in your changes. You avoid a possibly complicated search and replace operation. More details: https://gohugo.io/content-management/shortcodes/ ","date":"2019-03-04","objectID":"/shortcodes-preview/:1:0","tags":["preview","shortcodes"],"title":"Shortcodes Preview","uri":"/shortcodes-preview/"},{"categories":["docs","shortcodes","index"],"content":"blockquotes Normal quote: This is a simple quote. Quote with author: This is a quote with only an Author named Author2. Quote with author and source: This is a quote from Author3 and source “source.” Quote with author and link: This is a quote from Author4 and links to https://www.google.com. Quote with author, link and title: This is a quote from Author5 and links to https://www.google.com with title “Google.” Quote with author and a link longer than 32 characters, string is first cut at 32 characters then everything after the last forward slash is removed This is a quote from Author5 and links to https://twitter.com/CryptoGangsta/status/716427930126196737 which is longer than 32 characters. And this is a new line in the quote with the HTML br tag. Test from the Octopress blockquote page at: http://octopress.org/docs/plugins/blockquote/ Over the past 24 hours I’ve been reflecting on my life \u0026 I’ve realized only one thing. I need a medieval battle axe. ","date":"2019-03-04","objectID":"/shortcodes-preview/:2:0","tags":["preview","shortcodes"],"title":"Shortcodes Preview","uri":"/shortcodes-preview/"},{"categories":["docs","shortcodes","index"],"content":"music ","date":"2019-03-04","objectID":"/shortcodes-preview/:3:0","tags":["preview","shortcodes"],"title":"Shortcodes Preview","uri":"/shortcodes-preview/"},{"categories":["docs","shortcodes","index"],"content":"gist(+1) We can embed the gist in our content via username and gist ID pulled from the URL: {{\u003c gist AGou-ops 5e0b2df2f0d23c65742a633ed0225cf6 \u003e}} Display: ","date":"2019-03-04","objectID":"/shortcodes-preview/:4:0","tags":["preview","shortcodes"],"title":"Shortcodes Preview","uri":"/shortcodes-preview/"},{"categories":["docs","shortcodes","index"],"content":"expand The Expand shortcode displays an expandable/collapsible section of text on your page. Here is an example Yes !. ","date":"2019-03-04","objectID":"/shortcodes-preview/:5:0","tags":["preview","shortcodes"],"title":"Shortcodes Preview","uri":"/shortcodes-preview/"},{"categories":["docs","shortcodes","index"],"content":"Usage this shortcode takes exactly one optional parameter to define the text that appears next to the expand/collapse icon. (default is “Click to expand”) Yes !. ","date":"2019-03-04","objectID":"/shortcodes-preview/:5:1","tags":["preview","shortcodes"],"title":"Shortcodes Preview","uri":"/shortcodes-preview/"},{"categories":["docs","shortcodes","index"],"content":"youtube ","date":"2019-03-04","objectID":"/shortcodes-preview/:6:0","tags":["preview","shortcodes"],"title":"Shortcodes Preview","uri":"/shortcodes-preview/"},{"categories":["docs","shortcodes","index"],"content":"vimeo ","date":"2019-03-04","objectID":"/shortcodes-preview/:7:0","tags":["preview","shortcodes"],"title":"Shortcodes Preview","uri":"/shortcodes-preview/"},{"categories":["docs","shortcodes","index"],"content":"youku","date":"2019-03-04","objectID":"/shortcodes-preview/:8:0","tags":["preview","shortcodes"],"title":"Shortcodes Preview","uri":"/shortcodes-preview/"},{"categories":["docs","shortcodes","index"],"content":"Thanks for liwenyip/hugo-easy-gallery \u0026 Zebradil · Pull Request #48 . Now, we could use {{\u003c gallery \u003e}} shortcode in hugo-theme-jane. ","date":"2019-03-03","objectID":"/image-preview/:0:0","tags":["preview","image","shortcodes"],"title":"Image Preview","uri":"/image-preview/"},{"categories":["docs","shortcodes","index"],"content":"Normal Image This is an image in static/image folder. ![This is an image in `static/image` folder.](https://agou-images.oss-cn-qingdao.aliyuncs.com/violet-evergarden/Screenshot_2020-03-29-21-40-19.png) ","date":"2019-03-03","objectID":"/image-preview/:1:0","tags":["preview","image","shortcodes"],"title":"Image Preview","uri":"/image-preview/"},{"categories":["docs","shortcodes","index"],"content":"{{\u003c figure \u003e}} shortcode ","date":"2019-03-03","objectID":"/image-preview/:2:0","tags":["preview","image","shortcodes"],"title":"Image Preview","uri":"/image-preview/"},{"categories":["docs","shortcodes","index"],"content":"figure image with title {{\u003c figure src=\"/image/test.png\" title=\"figure image with title\" \u003e}} ","date":"2019-03-03","objectID":"/image-preview/:2:1","tags":["preview","image","shortcodes"],"title":"Image Preview","uri":"/image-preview/"},{"categories":["docs","shortcodes","index"],"content":"figure image with caption {{\u003c figure src=\"/image/example.jpg\" caption=\"figure image with caption figure image with caption figure image with caption figure image with caption figure image with caption\" \u003e}} ","date":"2019-03-03","objectID":"/image-preview/:2:2","tags":["preview","image","shortcodes"],"title":"Image Preview","uri":"/image-preview/"},{"categories":["docs","shortcodes","index"],"content":"more {{\u003c figure \u003e}} shortcode usage Specifying your image files: {{\u003c figure src=\"thumb.jpg\" link=\"image.jpg\" \u003e}} will use thumb.jpg for thumbnail and image.jpg for lightbox {{\u003c figure src=\"image.jpg\" \u003e}} or {{\u003c figure link=\"image.jpg\" \u003e}} will use image.jpg for both thumbnail and lightbox {{\u003c figure link=\"image.jpg\" thumb=\"-small\" \u003e}} will use image-small.jpg for thumbnail and image.jpg for lightbox Optional parameters: All the features/parameters of Hugo’s built-in figure shortcode work as normal, i.e. src, link, title, caption, class, attr (attribution), attrlink, alt size (e.g. size=\"1024x768\") pre-defines the image size for PhotoSwipe. Use this option if you don’t want to pre-load the linked image to determine its size. class allows you to set any custom classes you want on the \u003cfigure\u003e tag. Optional parameters for standalone {{\u003c figure \u003e}} shortcodes only (i.e. don’t use on {{\u003c figure \u003e}} inside {{\u003c gallery \u003e}} - strange things may happen if you do): caption-position and caption-effect work the same as for the {{\u003c gallery \u003e}} shortcode (see below). width defines the max-width of the image displayed on the page. If using a thumbnail for a standalone figure, set this equal to your thumbnail’s native width to make the captions behave properly (or feel free to come up with a better solution and submit a pull request :-)). Also use this option if you don’t have a thumbnail and you don’t want the hi-res image to take up the entire width of the screen/container. class=\"no-photoswipe\" prevents a \u003cfigure\u003e from being loaded into PhotoSwipe. If you click on the figure you’ll instead a good ol’ fashioned hyperlink to a bigger image (or - if you haven’t specified a bigger image - the same one). ","date":"2019-03-03","objectID":"/image-preview/:2:3","tags":["preview","image","shortcodes"],"title":"Image Preview","uri":"/image-preview/"},{"categories":["docs","shortcodes","index"],"content":"{{\u003c gallery \u003e}} shortcode ","date":"2019-03-03","objectID":"/image-preview/:3:0","tags":["preview","image","shortcodes"],"title":"Image Preview","uri":"/image-preview/"},{"categories":["docs","shortcodes","index"],"content":"simple gallery To specify a directory of image files: {{\u003c gallery dir=\"/img/your-directory-of-images/\" \u003e}} The images are automatically captioned with the file name. [image].jpg is used for the hi-res image, and [image]-thumb.jpg is used for the thumbnails. If [image]-thumb.jpg doesn’t exist, then [image].jpg will be used for both hi-res and thumbnail images. The default thumbnail suffix is -thumb, but you can specify a different one e.g. thumb=\"-small\" or thumb=\"_150x150\". ","date":"2019-03-03","objectID":"/image-preview/:3:1","tags":["preview","image","shortcodes"],"title":"Image Preview","uri":"/image-preview/"},{"categories":["docs","shortcodes","index"],"content":"To specify individual image files {{\u003c gallery \u003e}} {{\u003c figure src=\"image1.jpg\" \u003e}} {{\u003c figure src=\"image2.jpg\" \u003e}} {{\u003c figure src=\"image3.jpg\" \u003e}} {{\u003c /gallery \u003e}} Optional parameters: caption-position - determines the captions’ position over the image. Options: bottom (default) center none hides captions on the page (they will only show in PhotoSwipe) caption-effect - determines if/how captions appear upon hover. Options: slide (default) fade none (captions always visible) hover-effect - determines if/how images change upon hover. Options: zoom (default) grow shrink slideup slidedown none hover-transition - determines if/how images change upon hover. Options: not set - smooth transition (default) none - hard transition ","date":"2019-03-03","objectID":"/image-preview/:3:2","tags":["preview","image","shortcodes"],"title":"Image Preview","uri":"/image-preview/"}]